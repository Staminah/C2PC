
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSleftMINUSleftTIMESleftDIVnonassocIFXnonassocELSESHORT CHAR DOUBLE FLOAT INT LONG VOID IF ELSE FOR WHILE RETURN COMMA SEMICOLON LPAREN RPAREN LBRACE RBRACE ASSIGN GREATER LESS EQ NOT_EQ GREATER_EQ LESS_EQ PLUS MINUS TIMES DIV MODULO CARET DOT EQ_PLUS EQ_MINUS EQ_TIMES EQ_DIV DOUBLE_AMPERSAND DOUBLE_PIPE ID FNUMBER INUMBER STRING CHARACTER programme : statement  programme : statement programme  statement : iteration_statement\n        | compound_statement\n        | expression_statement\n        | selection_statement\n        | external_declaration\n        | return_statement expression_statement : expression SEMICOLONcompound_statement : LBRACE programme RBRACE iteration_statement : WHILE LPAREN expression RPAREN statement iteration_statement : FOR LPAREN expression_statement expression_statement expression RPAREN statementselection_statement : IF LPAREN expression RPAREN statement %prec IFX selection_statement : IF LPAREN expression RPAREN statement ELSE statement assignation : ID ASSIGN expression expression : logical_expression logical_expression : equality_expressionlogical_expression : logical_expression DOUBLE_AMPERSAND equality_expression\n                           | logical_expression DOUBLE_PIPE equality_expressionequality_expression : relational_expressionequality_expression : equality_expression EQ relational_expression\n                           | equality_expression NOT_EQ relational_expressionrelational_expression : op_expression\n    | assignation relational_expression : relational_expression LESS op_expression\n                             | relational_expression GREATER op_expression\n                             | relational_expression LESS_EQ op_expression\n                             | relational_expression GREATER_EQ op_expressionop_expression : op_expression PLUS primary_expression\n    | op_expression MINUS primary_expression\n    | op_expression TIMES primary_expression\n    | op_expression DIV primary_expression\n    | op_expression MODULO primary_expressionop_expression : primary_expression  primary_expression : ID  primary_expression : INUMBER\n        | FNUMBER primary_expression : LPAREN expression RPAREN  return_statement : RETURN SEMICOLON  return_statement : RETURN expression SEMICOLON type_specifier : INT\n                      | CHAR\n                      | FLOAT external_declaration : function_definition\n                            | declarationfunction_definition : type_specifier declarator compound_statementdeclaration : type_specifier declarator SEMICOLONdeclarator : direct_declaratordirect_declarator : IDdirect_declarator : direct_declarator LPAREN parameter_list RPARENdirect_declarator : direct_declarator LPAREN RPARENparameter_list : parameter_declarationparameter_list : parameter_list COMMA parameter_declarationparameter_declaration : type_specifier declarator'
    
_lr_action_items = {'WHILE':([0,2,3,4,5,6,7,8,13,15,16,34,38,60,62,65,66,81,83,88,90,94,95,97,98,],[9,9,-3,-4,-5,-6,-7,-8,9,-44,-45,-9,-39,-10,-40,-46,-47,9,9,-11,-13,9,9,-12,-14,]),'FOR':([0,2,3,4,5,6,7,8,13,15,16,34,38,60,62,65,66,81,83,88,90,94,95,97,98,],[12,12,-3,-4,-5,-6,-7,-8,12,-44,-45,-9,-39,-10,-40,-46,-47,12,12,-11,-13,12,12,-12,-14,]),'LBRACE':([0,2,3,4,5,6,7,8,13,15,16,34,38,42,43,44,60,62,65,66,81,83,85,88,90,91,94,95,97,98,],[13,13,-3,-4,-5,-6,-7,-8,13,-44,-45,-9,-39,13,-48,-49,-10,-40,-46,-47,13,13,-51,-11,-13,-50,13,13,-12,-14,]),'IF':([0,2,3,4,5,6,7,8,13,15,16,34,38,60,62,65,66,81,83,88,90,94,95,97,98,],[14,14,-3,-4,-5,-6,-7,-8,14,-44,-45,-9,-39,-10,-40,-46,-47,14,14,-11,-13,14,14,-12,-14,]),'RETURN':([0,2,3,4,5,6,7,8,13,15,16,34,38,60,62,65,66,81,83,88,90,94,95,97,98,],[17,17,-3,-4,-5,-6,-7,-8,17,-44,-45,-9,-39,-10,-40,-46,-47,17,17,-11,-13,17,17,-12,-14,]),'INT':([0,2,3,4,5,6,7,8,13,15,16,34,38,60,62,65,66,67,81,83,88,90,92,94,95,97,98,],[21,21,-3,-4,-5,-6,-7,-8,21,-44,-45,-9,-39,-10,-40,-46,-47,21,21,21,-11,-13,21,21,21,-12,-14,]),'CHAR':([0,2,3,4,5,6,7,8,13,15,16,34,38,60,62,65,66,67,81,83,88,90,92,94,95,97,98,],[22,22,-3,-4,-5,-6,-7,-8,22,-44,-45,-9,-39,-10,-40,-46,-47,22,22,22,-11,-13,22,22,22,-12,-14,]),'FLOAT':([0,2,3,4,5,6,7,8,13,15,16,34,38,60,62,65,66,67,81,83,88,90,92,94,95,97,98,],[23,23,-3,-4,-5,-6,-7,-8,23,-44,-45,-9,-39,-10,-40,-46,-47,23,23,23,-11,-13,23,23,23,-12,-14,]),'ID':([0,2,3,4,5,6,7,8,10,13,15,16,17,19,21,22,23,32,34,35,37,38,40,41,45,46,47,48,49,50,51,52,53,54,55,56,59,60,62,65,66,81,82,83,87,88,90,94,95,97,98,],[28,28,-3,-4,-5,-6,-7,-8,28,28,-44,-45,28,44,-41,-42,-43,28,-9,28,28,-39,28,28,28,28,71,71,71,71,71,71,71,71,71,28,28,-10,-40,-46,-47,28,28,28,44,-11,-13,28,28,-12,-14,]),'INUMBER':([0,2,3,4,5,6,7,8,10,13,15,16,17,32,34,35,37,38,40,41,45,46,47,48,49,50,51,52,53,54,55,56,59,60,62,65,66,81,82,83,88,90,94,95,97,98,],[29,29,-3,-4,-5,-6,-7,-8,29,29,-44,-45,29,29,-9,29,29,-39,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-10,-40,-46,-47,29,29,29,-11,-13,29,29,-12,-14,]),'FNUMBER':([0,2,3,4,5,6,7,8,10,13,15,16,17,32,34,35,37,38,40,41,45,46,47,48,49,50,51,52,53,54,55,56,59,60,62,65,66,81,82,83,88,90,94,95,97,98,],[30,30,-3,-4,-5,-6,-7,-8,30,30,-44,-45,30,30,-9,30,30,-39,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-10,-40,-46,-47,30,30,30,-11,-13,30,30,-12,-14,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,32,34,35,37,38,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,62,65,66,81,82,83,85,88,90,91,94,95,97,98,],[10,10,-3,-4,-5,-6,-7,-8,32,10,35,10,37,-44,-45,10,10,-9,10,10,-39,10,10,67,-49,10,10,10,10,10,10,10,10,10,10,10,10,10,-10,-40,-46,-47,10,10,10,-51,-11,-13,-50,10,10,-12,-14,]),'$end':([1,2,3,4,5,6,7,8,15,16,31,34,38,60,62,65,66,88,90,97,98,],[0,-1,-3,-4,-5,-6,-7,-8,-44,-45,-2,-9,-39,-10,-40,-46,-47,-11,-13,-12,-14,]),'RBRACE':([2,3,4,5,6,7,8,15,16,31,34,36,38,60,62,65,66,88,90,97,98,],[-1,-3,-4,-5,-6,-7,-8,-44,-45,-2,-9,60,-39,-10,-40,-46,-47,-11,-13,-12,-14,]),'ELSE':([3,4,5,6,7,8,15,16,34,38,60,62,65,66,88,90,97,98,],[-3,-4,-5,-6,-7,-8,-44,-45,-9,-39,-10,-40,-46,-47,-11,95,-12,-14,]),'SEMICOLON':([11,17,18,20,24,25,26,27,28,29,30,39,42,43,44,58,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,85,91,],[34,38,-16,-17,-20,-23,-24,-34,-35,-36,-37,62,66,-48,-49,-38,-18,-19,-21,-22,-25,-35,-26,-27,-28,-29,-30,-31,-32,-33,-15,-51,-50,]),'RPAREN':([18,20,24,25,26,27,28,29,30,33,43,44,57,58,61,63,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,85,86,89,91,93,96,],[-16,-17,-20,-23,-24,-34,-35,-36,-37,58,-48,-49,81,-38,83,-18,-19,85,-21,-22,-25,-35,-26,-27,-28,-29,-30,-31,-32,-33,-15,91,-51,-52,94,-50,-54,-53,]),'EQ':([18,20,24,25,26,27,28,29,30,58,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,],[-16,45,-20,-23,-24,-34,-35,-36,-37,-38,45,45,-21,-22,-25,-35,-26,-27,-28,-29,-30,-31,-32,-33,-15,]),'NOT_EQ':([18,20,24,25,26,27,28,29,30,58,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,],[-16,46,-20,-23,-24,-34,-35,-36,-37,-38,46,46,-21,-22,-25,-35,-26,-27,-28,-29,-30,-31,-32,-33,-15,]),'DOUBLE_AMPERSAND':([18,20,24,25,26,27,28,29,30,58,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,],[40,-17,-20,-23,-24,-34,-35,-36,-37,-38,-18,-19,-21,-22,-25,-35,-26,-27,-28,-29,-30,-31,-32,-33,-15,]),'DOUBLE_PIPE':([18,20,24,25,26,27,28,29,30,58,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,],[41,-17,-20,-23,-24,-34,-35,-36,-37,-38,-18,-19,-21,-22,-25,-35,-26,-27,-28,-29,-30,-31,-32,-33,-15,]),'LESS':([18,20,24,25,26,27,28,29,30,58,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,],[-16,-17,47,-23,-24,-34,-35,-36,-37,-38,-18,-19,47,47,-25,-35,-26,-27,-28,-29,-30,-31,-32,-33,-15,]),'GREATER':([18,20,24,25,26,27,28,29,30,58,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,],[-16,-17,48,-23,-24,-34,-35,-36,-37,-38,-18,-19,48,48,-25,-35,-26,-27,-28,-29,-30,-31,-32,-33,-15,]),'LESS_EQ':([18,20,24,25,26,27,28,29,30,58,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,],[-16,-17,49,-23,-24,-34,-35,-36,-37,-38,-18,-19,49,49,-25,-35,-26,-27,-28,-29,-30,-31,-32,-33,-15,]),'GREATER_EQ':([18,20,24,25,26,27,28,29,30,58,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,],[-16,-17,50,-23,-24,-34,-35,-36,-37,-38,-18,-19,50,50,-25,-35,-26,-27,-28,-29,-30,-31,-32,-33,-15,]),'PLUS':([25,27,28,29,30,58,70,71,72,73,74,75,76,77,78,79,],[51,-34,-35,-36,-37,-38,51,-35,51,51,51,-29,-30,-31,-32,-33,]),'MINUS':([25,27,28,29,30,58,70,71,72,73,74,75,76,77,78,79,],[52,-34,-35,-36,-37,-38,52,-35,52,52,52,-29,-30,-31,-32,-33,]),'TIMES':([25,27,28,29,30,58,70,71,72,73,74,75,76,77,78,79,],[53,-34,-35,-36,-37,-38,53,-35,53,53,53,-29,-30,-31,-32,-33,]),'DIV':([25,27,28,29,30,58,70,71,72,73,74,75,76,77,78,79,],[54,-34,-35,-36,-37,-38,54,-35,54,54,54,-29,-30,-31,-32,-33,]),'MODULO':([25,27,28,29,30,58,70,71,72,73,74,75,76,77,78,79,],[55,-34,-35,-36,-37,-38,55,-35,55,55,55,-29,-30,-31,-32,-33,]),'ASSIGN':([28,],[56,]),'COMMA':([43,44,84,85,86,91,93,96,],[-48,-49,92,-51,-52,-50,-54,-53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,2,13,],[1,31,36,]),'statement':([0,2,13,81,83,94,95,],[2,2,2,88,90,97,98,]),'iteration_statement':([0,2,13,81,83,94,95,],[3,3,3,3,3,3,3,]),'compound_statement':([0,2,13,42,81,83,94,95,],[4,4,4,65,4,4,4,4,]),'expression_statement':([0,2,13,35,59,81,83,94,95,],[5,5,5,59,82,5,5,5,5,]),'selection_statement':([0,2,13,81,83,94,95,],[6,6,6,6,6,6,6,]),'external_declaration':([0,2,13,81,83,94,95,],[7,7,7,7,7,7,7,]),'return_statement':([0,2,13,81,83,94,95,],[8,8,8,8,8,8,8,]),'expression':([0,2,10,13,17,32,35,37,56,59,81,82,83,94,95,],[11,11,33,11,39,57,11,61,80,11,11,89,11,11,11,]),'function_definition':([0,2,13,81,83,94,95,],[15,15,15,15,15,15,15,]),'declaration':([0,2,13,81,83,94,95,],[16,16,16,16,16,16,16,]),'logical_expression':([0,2,10,13,17,32,35,37,56,59,81,82,83,94,95,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'type_specifier':([0,2,13,67,81,83,92,94,95,],[19,19,19,87,19,19,87,19,19,]),'equality_expression':([0,2,10,13,17,32,35,37,40,41,56,59,81,82,83,94,95,],[20,20,20,20,20,20,20,20,63,64,20,20,20,20,20,20,20,]),'relational_expression':([0,2,10,13,17,32,35,37,40,41,45,46,56,59,81,82,83,94,95,],[24,24,24,24,24,24,24,24,24,24,68,69,24,24,24,24,24,24,24,]),'op_expression':([0,2,10,13,17,32,35,37,40,41,45,46,47,48,49,50,56,59,81,82,83,94,95,],[25,25,25,25,25,25,25,25,25,25,25,25,70,72,73,74,25,25,25,25,25,25,25,]),'assignation':([0,2,10,13,17,32,35,37,40,41,45,46,56,59,81,82,83,94,95,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'primary_expression':([0,2,10,13,17,32,35,37,40,41,45,46,47,48,49,50,51,52,53,54,55,56,59,81,82,83,94,95,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,75,76,77,78,79,27,27,27,27,27,27,27,]),'declarator':([19,87,],[42,93,]),'direct_declarator':([19,87,],[43,43,]),'parameter_list':([67,],[84,]),'parameter_declaration':([67,92,],[86,96,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser_C2PC.py',24),
  ('programme -> statement programme','programme',2,'p_programme_recursive','parser_C2PC.py',28),
  ('statement -> iteration_statement','statement',1,'p_statement','parser_C2PC.py',32),
  ('statement -> compound_statement','statement',1,'p_statement','parser_C2PC.py',33),
  ('statement -> expression_statement','statement',1,'p_statement','parser_C2PC.py',34),
  ('statement -> selection_statement','statement',1,'p_statement','parser_C2PC.py',35),
  ('statement -> external_declaration','statement',1,'p_statement','parser_C2PC.py',36),
  ('statement -> return_statement','statement',1,'p_statement','parser_C2PC.py',37),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser_C2PC.py',41),
  ('compound_statement -> LBRACE programme RBRACE','compound_statement',3,'p_compound_statement_01','parser_C2PC.py',45),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_01','parser_C2PC.py',49),
  ('iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement','iteration_statement',7,'p_iteration_statement_02','parser_C2PC.py',53),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_01','parser_C2PC.py',57),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_02','parser_C2PC.py',61),
  ('assignation -> ID ASSIGN expression','assignation',3,'p_assign','parser_C2PC.py',65),
  ('expression -> logical_expression','expression',1,'p_expression_assign','parser_C2PC.py',73),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression_01','parser_C2PC.py',77),
  ('logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression','logical_expression',3,'p_logical_expression_02','parser_C2PC.py',81),
  ('logical_expression -> logical_expression DOUBLE_PIPE equality_expression','logical_expression',3,'p_logical_expression_02','parser_C2PC.py',82),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_01','parser_C2PC.py',86),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression_02','parser_C2PC.py',90),
  ('equality_expression -> equality_expression NOT_EQ relational_expression','equality_expression',3,'p_equality_expression_02','parser_C2PC.py',91),
  ('relational_expression -> op_expression','relational_expression',1,'p_relational_expression_01','parser_C2PC.py',95),
  ('relational_expression -> assignation','relational_expression',1,'p_relational_expression_01','parser_C2PC.py',96),
  ('relational_expression -> relational_expression LESS op_expression','relational_expression',3,'p_relational_expression_02','parser_C2PC.py',100),
  ('relational_expression -> relational_expression GREATER op_expression','relational_expression',3,'p_relational_expression_02','parser_C2PC.py',101),
  ('relational_expression -> relational_expression LESS_EQ op_expression','relational_expression',3,'p_relational_expression_02','parser_C2PC.py',102),
  ('relational_expression -> relational_expression GREATER_EQ op_expression','relational_expression',3,'p_relational_expression_02','parser_C2PC.py',103),
  ('op_expression -> op_expression PLUS primary_expression','op_expression',3,'p_expression_op_01','parser_C2PC.py',107),
  ('op_expression -> op_expression MINUS primary_expression','op_expression',3,'p_expression_op_01','parser_C2PC.py',108),
  ('op_expression -> op_expression TIMES primary_expression','op_expression',3,'p_expression_op_01','parser_C2PC.py',109),
  ('op_expression -> op_expression DIV primary_expression','op_expression',3,'p_expression_op_01','parser_C2PC.py',110),
  ('op_expression -> op_expression MODULO primary_expression','op_expression',3,'p_expression_op_01','parser_C2PC.py',111),
  ('op_expression -> primary_expression','op_expression',1,'p_expression_op_02','parser_C2PC.py',115),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression_var','parser_C2PC.py',119),
  ('primary_expression -> INUMBER','primary_expression',1,'p_primary_expression_num','parser_C2PC.py',127),
  ('primary_expression -> FNUMBER','primary_expression',1,'p_primary_expression_num','parser_C2PC.py',128),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_par','parser_C2PC.py',132),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_01','parser_C2PC.py',136),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_02','parser_C2PC.py',140),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser_C2PC.py',144),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser_C2PC.py',145),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser_C2PC.py',146),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','parser_C2PC.py',150),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','parser_C2PC.py',151),
  ('function_definition -> type_specifier declarator compound_statement','function_definition',3,'p_function_definition_01','parser_C2PC.py',155),
  ('declaration -> type_specifier declarator SEMICOLON','declaration',3,'p_declaration_01','parser_C2PC.py',167),
  ('declarator -> direct_declarator','declarator',1,'p_declarator_01','parser_C2PC.py',178),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator_01','parser_C2PC.py',182),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator_02','parser_C2PC.py',186),
  ('direct_declarator -> direct_declarator LPAREN RPAREN','direct_declarator',3,'p_direct_declarator_03','parser_C2PC.py',192),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list_01','parser_C2PC.py',197),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list_02','parser_C2PC.py',201),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','parser_C2PC.py',206),
]
