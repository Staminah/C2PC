
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSleftMINUSleftTIMESleftDIVnonassocIFXnonassocELSESHORT CHAR DOUBLE FLOAT INT LONG VOID IF ELSE FOR WHILE RETURN COMMA SEMICOLON LPAREN RPAREN LBRACE RBRACE ASSIGN GREATER LESS EQ NOT_EQ GREATER_EQ LESS_EQ PLUS MINUS TIMES DIV MODULO CARET DOT EQ_PLUS EQ_MINUS EQ_TIMES EQ_DIV DOUBLE_AMPERSAND DOUBLE_PIPE ID FNUMBER INUMBER STRING CHARACTER programme : statement  programme : statement programme  statement : iteration_statement\n        | compound_statement\n        | expression_statement\n        | selection_statement expression_statement : expression SEMICOLONcompound_statement : LBRACE programme RBRACE iteration_statement : WHILE LPAREN expression RPAREN statement iteration_statement : FOR LPAREN expression_statement expression_statement expression RPAREN statementselection_statement : IF LPAREN expression RPAREN statement %prec IFX selection_statement : IF LPAREN expression RPAREN statement ELSE statement assignation : ID ASSIGN expression  primary_expression : ID  primary_expression : INUMBER\n        | FNUMBER primary_expression : LPAREN expression RPAREN op_expression : op_expression PLUS primary_expression\n    | op_expression MINUS primary_expression\n    | op_expression TIMES primary_expression\n    | op_expression DIV primary_expression\n    | op_expression MODULO primary_expressionop_expression : primary_expression expression : logical_expression relational_expression : op_expression\n    | assignation relational_expression : relational_expression LESS op_expression\n                             | relational_expression GREATER op_expression\n                             | relational_expression LESS_EQ op_expression\n                             | relational_expression GREATER_EQ op_expressionequality_expression : relational_expressionequality_expression : equality_expression EQ relational_expression\n                           | equality_expression NOT_EQ relational_expressionlogical_expression : equality_expressionlogical_expression : logical_expression DOUBLE_AMPERSAND equality_expression\n                           | logical_expression DOUBLE_PIPE equality_expression'
    
_lr_action_items = {'WHILE':([0,2,3,4,5,6,11,25,46,63,65,66,68,69,70,71,72,],[7,7,-3,-4,-5,-6,7,-7,-8,7,7,-9,-11,7,7,-10,-12,]),'FOR':([0,2,3,4,5,6,11,25,46,63,65,66,68,69,70,71,72,],[10,10,-3,-4,-5,-6,10,-7,-8,10,10,-9,-11,10,10,-10,-12,]),'LBRACE':([0,2,3,4,5,6,11,25,46,63,65,66,68,69,70,71,72,],[11,11,-3,-4,-5,-6,11,-7,-8,11,11,-9,-11,11,11,-10,-12,]),'IF':([0,2,3,4,5,6,11,25,46,63,65,66,68,69,70,71,72,],[12,12,-3,-4,-5,-6,12,-7,-8,12,12,-9,-11,12,12,-10,-12,]),'ID':([0,2,3,4,5,6,8,11,23,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,63,64,65,66,68,69,70,71,72,],[19,19,-3,-4,-5,-6,19,19,19,-7,19,19,19,19,19,19,53,53,53,53,53,53,53,53,53,19,19,-8,19,19,19,-9,-11,19,19,-10,-12,]),'INUMBER':([0,2,3,4,5,6,8,11,23,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,63,64,65,66,68,69,70,71,72,],[20,20,-3,-4,-5,-6,20,20,20,-7,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-8,20,20,20,-9,-11,20,20,-10,-12,]),'FNUMBER':([0,2,3,4,5,6,8,11,23,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,63,64,65,66,68,69,70,71,72,],[21,21,-3,-4,-5,-6,21,21,21,-7,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-8,21,21,21,-9,-11,21,21,-10,-12,]),'LPAREN':([0,2,3,4,5,6,7,8,10,11,12,23,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,63,64,65,66,68,69,70,71,72,],[8,8,-3,-4,-5,-6,23,8,26,8,28,8,-7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-8,8,8,8,-9,-11,8,8,-10,-12,]),'$end':([1,2,3,4,5,6,22,25,46,66,68,71,72,],[0,-1,-3,-4,-5,-6,-2,-7,-8,-9,-11,-10,-12,]),'RBRACE':([2,3,4,5,6,22,25,27,46,66,68,71,72,],[-1,-3,-4,-5,-6,-2,-7,46,-8,-9,-11,-10,-12,]),'ELSE':([3,4,5,6,25,46,66,68,71,72,],[-3,-4,-5,-6,-7,-8,-9,70,-10,-12,]),'SEMICOLON':([9,13,14,15,16,17,18,19,20,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[25,-24,-34,-31,-25,-26,-23,-14,-15,-16,-17,-35,-36,-32,-33,-27,-14,-28,-29,-30,-18,-19,-20,-21,-22,-13,]),'RPAREN':([13,14,15,16,17,18,19,20,21,24,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,67,],[-24,-34,-31,-25,-26,-23,-14,-15,-16,44,63,-17,65,-35,-36,-32,-33,-27,-14,-28,-29,-30,-18,-19,-20,-21,-22,-13,69,]),'EQ':([13,14,15,16,17,18,19,20,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-24,31,-31,-25,-26,-23,-14,-15,-16,-17,31,31,-32,-33,-27,-14,-28,-29,-30,-18,-19,-20,-21,-22,-13,]),'NOT_EQ':([13,14,15,16,17,18,19,20,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-24,32,-31,-25,-26,-23,-14,-15,-16,-17,32,32,-32,-33,-27,-14,-28,-29,-30,-18,-19,-20,-21,-22,-13,]),'DOUBLE_AMPERSAND':([13,14,15,16,17,18,19,20,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[29,-34,-31,-25,-26,-23,-14,-15,-16,-17,-35,-36,-32,-33,-27,-14,-28,-29,-30,-18,-19,-20,-21,-22,-13,]),'DOUBLE_PIPE':([13,14,15,16,17,18,19,20,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[30,-34,-31,-25,-26,-23,-14,-15,-16,-17,-35,-36,-32,-33,-27,-14,-28,-29,-30,-18,-19,-20,-21,-22,-13,]),'LESS':([13,14,15,16,17,18,19,20,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-24,-34,33,-25,-26,-23,-14,-15,-16,-17,-35,-36,33,33,-27,-14,-28,-29,-30,-18,-19,-20,-21,-22,-13,]),'GREATER':([13,14,15,16,17,18,19,20,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-24,-34,34,-25,-26,-23,-14,-15,-16,-17,-35,-36,34,34,-27,-14,-28,-29,-30,-18,-19,-20,-21,-22,-13,]),'LESS_EQ':([13,14,15,16,17,18,19,20,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-24,-34,35,-25,-26,-23,-14,-15,-16,-17,-35,-36,35,35,-27,-14,-28,-29,-30,-18,-19,-20,-21,-22,-13,]),'GREATER_EQ':([13,14,15,16,17,18,19,20,21,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-24,-34,36,-25,-26,-23,-14,-15,-16,-17,-35,-36,36,36,-27,-14,-28,-29,-30,-18,-19,-20,-21,-22,-13,]),'PLUS':([16,18,19,20,21,44,52,53,54,55,56,57,58,59,60,61,],[37,-23,-14,-15,-16,-17,37,-14,37,37,37,-18,-19,-20,-21,-22,]),'MINUS':([16,18,19,20,21,44,52,53,54,55,56,57,58,59,60,61,],[38,-23,-14,-15,-16,-17,38,-14,38,38,38,-18,-19,-20,-21,-22,]),'TIMES':([16,18,19,20,21,44,52,53,54,55,56,57,58,59,60,61,],[39,-23,-14,-15,-16,-17,39,-14,39,39,39,-18,-19,-20,-21,-22,]),'DIV':([16,18,19,20,21,44,52,53,54,55,56,57,58,59,60,61,],[40,-23,-14,-15,-16,-17,40,-14,40,40,40,-18,-19,-20,-21,-22,]),'MODULO':([16,18,19,20,21,44,52,53,54,55,56,57,58,59,60,61,],[41,-23,-14,-15,-16,-17,41,-14,41,41,41,-18,-19,-20,-21,-22,]),'ASSIGN':([19,],[42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,2,11,],[1,22,27,]),'statement':([0,2,11,63,65,69,70,],[2,2,2,66,68,71,72,]),'iteration_statement':([0,2,11,63,65,69,70,],[3,3,3,3,3,3,3,]),'compound_statement':([0,2,11,63,65,69,70,],[4,4,4,4,4,4,4,]),'expression_statement':([0,2,11,26,45,63,65,69,70,],[5,5,5,45,64,5,5,5,5,]),'selection_statement':([0,2,11,63,65,69,70,],[6,6,6,6,6,6,6,]),'expression':([0,2,8,11,23,26,28,42,45,63,64,65,69,70,],[9,9,24,9,43,9,47,62,9,9,67,9,9,9,]),'logical_expression':([0,2,8,11,23,26,28,42,45,63,64,65,69,70,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'equality_expression':([0,2,8,11,23,26,28,29,30,42,45,63,64,65,69,70,],[14,14,14,14,14,14,14,48,49,14,14,14,14,14,14,14,]),'relational_expression':([0,2,8,11,23,26,28,29,30,31,32,42,45,63,64,65,69,70,],[15,15,15,15,15,15,15,15,15,50,51,15,15,15,15,15,15,15,]),'op_expression':([0,2,8,11,23,26,28,29,30,31,32,33,34,35,36,42,45,63,64,65,69,70,],[16,16,16,16,16,16,16,16,16,16,16,52,54,55,56,16,16,16,16,16,16,16,]),'assignation':([0,2,8,11,23,26,28,29,30,31,32,42,45,63,64,65,69,70,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'primary_expression':([0,2,8,11,23,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,63,64,65,69,70,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,57,58,59,60,61,18,18,18,18,18,18,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser_C2PC.py',19),
  ('programme -> statement programme','programme',2,'p_programme_recursive','parser_C2PC.py',23),
  ('statement -> iteration_statement','statement',1,'p_statement','parser_C2PC.py',27),
  ('statement -> compound_statement','statement',1,'p_statement','parser_C2PC.py',28),
  ('statement -> expression_statement','statement',1,'p_statement','parser_C2PC.py',29),
  ('statement -> selection_statement','statement',1,'p_statement','parser_C2PC.py',30),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser_C2PC.py',34),
  ('compound_statement -> LBRACE programme RBRACE','compound_statement',3,'p_compound_statement_01','parser_C2PC.py',38),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_01','parser_C2PC.py',43),
  ('iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement','iteration_statement',7,'p_iteration_statement_02','parser_C2PC.py',47),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_01','parser_C2PC.py',51),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_02','parser_C2PC.py',55),
  ('assignation -> ID ASSIGN expression','assignation',3,'p_assign','parser_C2PC.py',59),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression_var','parser_C2PC.py',63),
  ('primary_expression -> INUMBER','primary_expression',1,'p_primary_expression_num','parser_C2PC.py',67),
  ('primary_expression -> FNUMBER','primary_expression',1,'p_primary_expression_num','parser_C2PC.py',68),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_par','parser_C2PC.py',72),
  ('op_expression -> op_expression PLUS primary_expression','op_expression',3,'p_expression_op_01','parser_C2PC.py',82),
  ('op_expression -> op_expression MINUS primary_expression','op_expression',3,'p_expression_op_01','parser_C2PC.py',83),
  ('op_expression -> op_expression TIMES primary_expression','op_expression',3,'p_expression_op_01','parser_C2PC.py',84),
  ('op_expression -> op_expression DIV primary_expression','op_expression',3,'p_expression_op_01','parser_C2PC.py',85),
  ('op_expression -> op_expression MODULO primary_expression','op_expression',3,'p_expression_op_01','parser_C2PC.py',86),
  ('op_expression -> primary_expression','op_expression',1,'p_expression_op_02','parser_C2PC.py',90),
  ('expression -> logical_expression','expression',1,'p_expression_assign','parser_C2PC.py',94),
  ('relational_expression -> op_expression','relational_expression',1,'p_relational_expression_01','parser_C2PC.py',98),
  ('relational_expression -> assignation','relational_expression',1,'p_relational_expression_01','parser_C2PC.py',99),
  ('relational_expression -> relational_expression LESS op_expression','relational_expression',3,'p_relational_expression_02','parser_C2PC.py',103),
  ('relational_expression -> relational_expression GREATER op_expression','relational_expression',3,'p_relational_expression_02','parser_C2PC.py',104),
  ('relational_expression -> relational_expression LESS_EQ op_expression','relational_expression',3,'p_relational_expression_02','parser_C2PC.py',105),
  ('relational_expression -> relational_expression GREATER_EQ op_expression','relational_expression',3,'p_relational_expression_02','parser_C2PC.py',106),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_01','parser_C2PC.py',110),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression_02','parser_C2PC.py',114),
  ('equality_expression -> equality_expression NOT_EQ relational_expression','equality_expression',3,'p_equality_expression_02','parser_C2PC.py',115),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression_01','parser_C2PC.py',119),
  ('logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression','logical_expression',3,'p_logical_expression_02','parser_C2PC.py',123),
  ('logical_expression -> logical_expression DOUBLE_PIPE equality_expression','logical_expression',3,'p_logical_expression_02','parser_C2PC.py',124),
]
