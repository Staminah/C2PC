Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    SHORT
    DOUBLE
    LONG
    VOID
    CARET
    DOT
    EQ_PLUS
    EQ_MINUS
    EQ_TIMES
    EQ_DIV
    STRING
    CHARACTER

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement programme
Rule 3     statement -> iteration_statement
Rule 4     statement -> compound_statement
Rule 5     statement -> expression_statement
Rule 6     statement -> selection_statement
Rule 7     statement -> external_declaration
Rule 8     statement -> return_statement
Rule 9     expression_statement -> expression SEMICOLON
Rule 10    compound_statement -> LBRACE programme RBRACE
Rule 11    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 12    iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 13    selection_statement -> IF LPAREN expression RPAREN statement
Rule 14    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 15    assignation -> ID ASSIGN expression
Rule 16    expression -> logical_expression
Rule 17    logical_expression -> equality_expression
Rule 18    logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression
Rule 19    logical_expression -> logical_expression DOUBLE_PIPE equality_expression
Rule 20    equality_expression -> relational_expression
Rule 21    equality_expression -> equality_expression EQ relational_expression
Rule 22    equality_expression -> equality_expression NOT_EQ relational_expression
Rule 23    relational_expression -> additive_expression
Rule 24    relational_expression -> assignation
Rule 25    relational_expression -> relational_expression LESS additive_expression
Rule 26    relational_expression -> relational_expression GREATER additive_expression
Rule 27    relational_expression -> relational_expression LESS_EQ additive_expression
Rule 28    relational_expression -> relational_expression GREATER_EQ additive_expression
Rule 29    additive_expression -> additive_expression PLUS mult_expression
Rule 30    additive_expression -> additive_expression MINUS mult_expression
Rule 31    additive_expression -> mult_expression
Rule 32    mult_expression -> mult_expression TIMES postfix_expression
Rule 33    mult_expression -> mult_expression DIV postfix_expression
Rule 34    mult_expression -> mult_expression MODULO postfix_expression
Rule 35    mult_expression -> unary_expression
Rule 36    unary_expression -> postfix_expression
Rule 37    unary_expression -> MINUS unary_expression
Rule 38    unary_expression -> PLUS unary_expression
Rule 39    unary_expression -> EXCLAMATION unary_expression
Rule 40    primary_expression -> ID
Rule 41    primary_expression -> INUMBER
Rule 42    primary_expression -> FNUMBER
Rule 43    primary_expression -> LPAREN expression RPAREN
Rule 44    return_statement -> RETURN SEMICOLON
Rule 45    return_statement -> RETURN expression SEMICOLON
Rule 46    postfix_expression -> primary_expression
Rule 47    postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 48    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 49    argument_expression_list -> expression
Rule 50    argument_expression_list -> argument_expression_list COMMA expression
Rule 51    type_specifier -> INT
Rule 52    type_specifier -> CHAR
Rule 53    type_specifier -> FLOAT
Rule 54    external_declaration -> function_definition
Rule 55    external_declaration -> declaration
Rule 56    function_definition -> type_specifier declarator compound_statement
Rule 57    declaration -> type_specifier declarator SEMICOLON
Rule 58    declarator -> direct_declarator
Rule 59    direct_declarator -> ID
Rule 60    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 61    direct_declarator -> direct_declarator LPAREN RPAREN
Rule 62    parameter_list -> parameter_declaration
Rule 63    parameter_list -> parameter_list COMMA parameter_declaration
Rule 64    parameter_declaration -> type_specifier declarator

Terminals, with rules where they appear

ASSIGN               : 15
CARET                : 
CHAR                 : 52
CHARACTER            : 
COMMA                : 50 63
DIV                  : 33
DOT                  : 
DOUBLE               : 
DOUBLE_AMPERSAND     : 18
DOUBLE_PIPE          : 19
ELSE                 : 14
EQ                   : 21
EQ_DIV               : 
EQ_MINUS             : 
EQ_PLUS              : 
EQ_TIMES             : 
EXCLAMATION          : 39
FLOAT                : 53
FNUMBER              : 42
FOR                  : 12
GREATER              : 26
GREATER_EQ           : 28
ID                   : 15 40 59
IF                   : 13 14
INT                  : 51
INUMBER              : 41
LBRACE               : 10
LESS                 : 25
LESS_EQ              : 27
LONG                 : 
LPAREN               : 11 12 13 14 43 47 48 60 61
MINUS                : 30 37
MODULO               : 34
NOT_EQ               : 22
PLUS                 : 29 38
RBRACE               : 10
RETURN               : 44 45
RPAREN               : 11 12 13 14 43 47 48 60 61
SEMICOLON            : 9 44 45 57
SHORT                : 
STRING               : 
TIMES                : 32
VOID                 : 
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

additive_expression  : 23 25 26 27 28 29 30
argument_expression_list : 47 50
assignation          : 24
compound_statement   : 4 56
declaration          : 55
declarator           : 56 57 64
direct_declarator    : 58 60 61
equality_expression  : 17 18 19 21 22
expression           : 9 11 12 13 14 15 43 45 49 50
expression_statement : 5 12 12
external_declaration : 7
function_definition  : 54
iteration_statement  : 3
logical_expression   : 16 18 19
mult_expression      : 29 30 31 32 33 34
parameter_declaration : 62 63
parameter_list       : 60 63
postfix_expression   : 32 33 34 36 47 48
primary_expression   : 46
programme            : 2 10 0
relational_expression : 20 21 22 25 26 27 28
return_statement     : 8
selection_statement  : 6
statement            : 1 2 11 12 13 14 14
type_specifier       : 56 57 64
unary_expression     : 35 37 38 39

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) external_declaration -> . function_definition
    (55) external_declaration -> . declaration
    (44) return_statement -> . RETURN SEMICOLON
    (45) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (56) function_definition -> . type_specifier declarator compound_statement
    (57) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (51) type_specifier -> . INT
    (52) type_specifier -> . CHAR
    (53) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    expression                     shift and go to state 11
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . programme
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) external_declaration -> . function_definition
    (55) external_declaration -> . declaration
    (44) return_statement -> . RETURN SEMICOLON
    (45) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (56) function_definition -> . type_specifier declarator compound_statement
    (57) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (51) type_specifier -> . INT
    (52) type_specifier -> . CHAR
    (53) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    $end            reduce using rule 1 (programme -> statement .)
    RBRACE          reduce using rule 1 (programme -> statement .)
    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    statement                      shift and go to state 2
    programme                      shift and go to state 37
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    expression                     shift and go to state 11
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 3

    (3) statement -> iteration_statement .

    WHILE           reduce using rule 3 (statement -> iteration_statement .)
    FOR             reduce using rule 3 (statement -> iteration_statement .)
    LBRACE          reduce using rule 3 (statement -> iteration_statement .)
    IF              reduce using rule 3 (statement -> iteration_statement .)
    RETURN          reduce using rule 3 (statement -> iteration_statement .)
    INT             reduce using rule 3 (statement -> iteration_statement .)
    CHAR            reduce using rule 3 (statement -> iteration_statement .)
    FLOAT           reduce using rule 3 (statement -> iteration_statement .)
    ID              reduce using rule 3 (statement -> iteration_statement .)
    MINUS           reduce using rule 3 (statement -> iteration_statement .)
    PLUS            reduce using rule 3 (statement -> iteration_statement .)
    EXCLAMATION     reduce using rule 3 (statement -> iteration_statement .)
    INUMBER         reduce using rule 3 (statement -> iteration_statement .)
    FNUMBER         reduce using rule 3 (statement -> iteration_statement .)
    LPAREN          reduce using rule 3 (statement -> iteration_statement .)
    $end            reduce using rule 3 (statement -> iteration_statement .)
    RBRACE          reduce using rule 3 (statement -> iteration_statement .)
    ELSE            reduce using rule 3 (statement -> iteration_statement .)


state 4

    (4) statement -> compound_statement .

    WHILE           reduce using rule 4 (statement -> compound_statement .)
    FOR             reduce using rule 4 (statement -> compound_statement .)
    LBRACE          reduce using rule 4 (statement -> compound_statement .)
    IF              reduce using rule 4 (statement -> compound_statement .)
    RETURN          reduce using rule 4 (statement -> compound_statement .)
    INT             reduce using rule 4 (statement -> compound_statement .)
    CHAR            reduce using rule 4 (statement -> compound_statement .)
    FLOAT           reduce using rule 4 (statement -> compound_statement .)
    ID              reduce using rule 4 (statement -> compound_statement .)
    MINUS           reduce using rule 4 (statement -> compound_statement .)
    PLUS            reduce using rule 4 (statement -> compound_statement .)
    EXCLAMATION     reduce using rule 4 (statement -> compound_statement .)
    INUMBER         reduce using rule 4 (statement -> compound_statement .)
    FNUMBER         reduce using rule 4 (statement -> compound_statement .)
    LPAREN          reduce using rule 4 (statement -> compound_statement .)
    $end            reduce using rule 4 (statement -> compound_statement .)
    RBRACE          reduce using rule 4 (statement -> compound_statement .)
    ELSE            reduce using rule 4 (statement -> compound_statement .)


state 5

    (5) statement -> expression_statement .

    WHILE           reduce using rule 5 (statement -> expression_statement .)
    FOR             reduce using rule 5 (statement -> expression_statement .)
    LBRACE          reduce using rule 5 (statement -> expression_statement .)
    IF              reduce using rule 5 (statement -> expression_statement .)
    RETURN          reduce using rule 5 (statement -> expression_statement .)
    INT             reduce using rule 5 (statement -> expression_statement .)
    CHAR            reduce using rule 5 (statement -> expression_statement .)
    FLOAT           reduce using rule 5 (statement -> expression_statement .)
    ID              reduce using rule 5 (statement -> expression_statement .)
    MINUS           reduce using rule 5 (statement -> expression_statement .)
    PLUS            reduce using rule 5 (statement -> expression_statement .)
    EXCLAMATION     reduce using rule 5 (statement -> expression_statement .)
    INUMBER         reduce using rule 5 (statement -> expression_statement .)
    FNUMBER         reduce using rule 5 (statement -> expression_statement .)
    LPAREN          reduce using rule 5 (statement -> expression_statement .)
    $end            reduce using rule 5 (statement -> expression_statement .)
    RBRACE          reduce using rule 5 (statement -> expression_statement .)
    ELSE            reduce using rule 5 (statement -> expression_statement .)


state 6

    (6) statement -> selection_statement .

    WHILE           reduce using rule 6 (statement -> selection_statement .)
    FOR             reduce using rule 6 (statement -> selection_statement .)
    LBRACE          reduce using rule 6 (statement -> selection_statement .)
    IF              reduce using rule 6 (statement -> selection_statement .)
    RETURN          reduce using rule 6 (statement -> selection_statement .)
    INT             reduce using rule 6 (statement -> selection_statement .)
    CHAR            reduce using rule 6 (statement -> selection_statement .)
    FLOAT           reduce using rule 6 (statement -> selection_statement .)
    ID              reduce using rule 6 (statement -> selection_statement .)
    MINUS           reduce using rule 6 (statement -> selection_statement .)
    PLUS            reduce using rule 6 (statement -> selection_statement .)
    EXCLAMATION     reduce using rule 6 (statement -> selection_statement .)
    INUMBER         reduce using rule 6 (statement -> selection_statement .)
    FNUMBER         reduce using rule 6 (statement -> selection_statement .)
    LPAREN          reduce using rule 6 (statement -> selection_statement .)
    $end            reduce using rule 6 (statement -> selection_statement .)
    RBRACE          reduce using rule 6 (statement -> selection_statement .)
    ELSE            reduce using rule 6 (statement -> selection_statement .)


state 7

    (7) statement -> external_declaration .

    WHILE           reduce using rule 7 (statement -> external_declaration .)
    FOR             reduce using rule 7 (statement -> external_declaration .)
    LBRACE          reduce using rule 7 (statement -> external_declaration .)
    IF              reduce using rule 7 (statement -> external_declaration .)
    RETURN          reduce using rule 7 (statement -> external_declaration .)
    INT             reduce using rule 7 (statement -> external_declaration .)
    CHAR            reduce using rule 7 (statement -> external_declaration .)
    FLOAT           reduce using rule 7 (statement -> external_declaration .)
    ID              reduce using rule 7 (statement -> external_declaration .)
    MINUS           reduce using rule 7 (statement -> external_declaration .)
    PLUS            reduce using rule 7 (statement -> external_declaration .)
    EXCLAMATION     reduce using rule 7 (statement -> external_declaration .)
    INUMBER         reduce using rule 7 (statement -> external_declaration .)
    FNUMBER         reduce using rule 7 (statement -> external_declaration .)
    LPAREN          reduce using rule 7 (statement -> external_declaration .)
    $end            reduce using rule 7 (statement -> external_declaration .)
    RBRACE          reduce using rule 7 (statement -> external_declaration .)
    ELSE            reduce using rule 7 (statement -> external_declaration .)


state 8

    (8) statement -> return_statement .

    WHILE           reduce using rule 8 (statement -> return_statement .)
    FOR             reduce using rule 8 (statement -> return_statement .)
    LBRACE          reduce using rule 8 (statement -> return_statement .)
    IF              reduce using rule 8 (statement -> return_statement .)
    RETURN          reduce using rule 8 (statement -> return_statement .)
    INT             reduce using rule 8 (statement -> return_statement .)
    CHAR            reduce using rule 8 (statement -> return_statement .)
    FLOAT           reduce using rule 8 (statement -> return_statement .)
    ID              reduce using rule 8 (statement -> return_statement .)
    MINUS           reduce using rule 8 (statement -> return_statement .)
    PLUS            reduce using rule 8 (statement -> return_statement .)
    EXCLAMATION     reduce using rule 8 (statement -> return_statement .)
    INUMBER         reduce using rule 8 (statement -> return_statement .)
    FNUMBER         reduce using rule 8 (statement -> return_statement .)
    LPAREN          reduce using rule 8 (statement -> return_statement .)
    $end            reduce using rule 8 (statement -> return_statement .)
    RBRACE          reduce using rule 8 (statement -> return_statement .)
    ELSE            reduce using rule 8 (statement -> return_statement .)


state 9

    (11) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 38


state 10

    (43) primary_expression -> LPAREN . expression RPAREN
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression                     shift and go to state 39
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 11

    (9) expression_statement -> expression . SEMICOLON

    SEMICOLON       shift and go to state 40


state 12

    (12) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 41


state 13

    (10) compound_statement -> LBRACE . programme RBRACE
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) external_declaration -> . function_definition
    (55) external_declaration -> . declaration
    (44) return_statement -> . RETURN SEMICOLON
    (45) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (56) function_definition -> . type_specifier declarator compound_statement
    (57) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (51) type_specifier -> . INT
    (52) type_specifier -> . CHAR
    (53) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    programme                      shift and go to state 42
    statement                      shift and go to state 2
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    expression                     shift and go to state 11
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 14

    (13) selection_statement -> IF . LPAREN expression RPAREN statement
    (14) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 43


state 15

    (54) external_declaration -> function_definition .

    WHILE           reduce using rule 54 (external_declaration -> function_definition .)
    FOR             reduce using rule 54 (external_declaration -> function_definition .)
    LBRACE          reduce using rule 54 (external_declaration -> function_definition .)
    IF              reduce using rule 54 (external_declaration -> function_definition .)
    RETURN          reduce using rule 54 (external_declaration -> function_definition .)
    INT             reduce using rule 54 (external_declaration -> function_definition .)
    CHAR            reduce using rule 54 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 54 (external_declaration -> function_definition .)
    ID              reduce using rule 54 (external_declaration -> function_definition .)
    MINUS           reduce using rule 54 (external_declaration -> function_definition .)
    PLUS            reduce using rule 54 (external_declaration -> function_definition .)
    EXCLAMATION     reduce using rule 54 (external_declaration -> function_definition .)
    INUMBER         reduce using rule 54 (external_declaration -> function_definition .)
    FNUMBER         reduce using rule 54 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 54 (external_declaration -> function_definition .)
    $end            reduce using rule 54 (external_declaration -> function_definition .)
    RBRACE          reduce using rule 54 (external_declaration -> function_definition .)
    ELSE            reduce using rule 54 (external_declaration -> function_definition .)


state 16

    (55) external_declaration -> declaration .

    WHILE           reduce using rule 55 (external_declaration -> declaration .)
    FOR             reduce using rule 55 (external_declaration -> declaration .)
    LBRACE          reduce using rule 55 (external_declaration -> declaration .)
    IF              reduce using rule 55 (external_declaration -> declaration .)
    RETURN          reduce using rule 55 (external_declaration -> declaration .)
    INT             reduce using rule 55 (external_declaration -> declaration .)
    CHAR            reduce using rule 55 (external_declaration -> declaration .)
    FLOAT           reduce using rule 55 (external_declaration -> declaration .)
    ID              reduce using rule 55 (external_declaration -> declaration .)
    MINUS           reduce using rule 55 (external_declaration -> declaration .)
    PLUS            reduce using rule 55 (external_declaration -> declaration .)
    EXCLAMATION     reduce using rule 55 (external_declaration -> declaration .)
    INUMBER         reduce using rule 55 (external_declaration -> declaration .)
    FNUMBER         reduce using rule 55 (external_declaration -> declaration .)
    LPAREN          reduce using rule 55 (external_declaration -> declaration .)
    $end            reduce using rule 55 (external_declaration -> declaration .)
    RBRACE          reduce using rule 55 (external_declaration -> declaration .)
    ELSE            reduce using rule 55 (external_declaration -> declaration .)


state 17

    (44) return_statement -> RETURN . SEMICOLON
    (45) return_statement -> RETURN . expression SEMICOLON
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 44
    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression                     shift and go to state 45
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 18

    (16) expression -> logical_expression .
    (18) logical_expression -> logical_expression . DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> logical_expression . DOUBLE_PIPE equality_expression

  ! shift/reduce conflict for DOUBLE_AMPERSAND resolved as shift
  ! shift/reduce conflict for DOUBLE_PIPE resolved as shift
    SEMICOLON       reduce using rule 16 (expression -> logical_expression .)
    RPAREN          reduce using rule 16 (expression -> logical_expression .)
    LESS            reduce using rule 16 (expression -> logical_expression .)
    GREATER         reduce using rule 16 (expression -> logical_expression .)
    LESS_EQ         reduce using rule 16 (expression -> logical_expression .)
    GREATER_EQ      reduce using rule 16 (expression -> logical_expression .)
    EQ              reduce using rule 16 (expression -> logical_expression .)
    NOT_EQ          reduce using rule 16 (expression -> logical_expression .)
    COMMA           reduce using rule 16 (expression -> logical_expression .)
    DOUBLE_AMPERSAND shift and go to state 46
    DOUBLE_PIPE     shift and go to state 47

  ! DOUBLE_AMPERSAND [ reduce using rule 16 (expression -> logical_expression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 16 (expression -> logical_expression .) ]


state 19

    (56) function_definition -> type_specifier . declarator compound_statement
    (57) declaration -> type_specifier . declarator SEMICOLON
    (58) declarator -> . direct_declarator
    (59) direct_declarator -> . ID
    (60) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (61) direct_declarator -> . direct_declarator LPAREN RPAREN

    ID              shift and go to state 50

    declarator                     shift and go to state 48
    direct_declarator              shift and go to state 49

state 20

    (17) logical_expression -> equality_expression .
    (21) equality_expression -> equality_expression . EQ relational_expression
    (22) equality_expression -> equality_expression . NOT_EQ relational_expression

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
    DOUBLE_AMPERSAND reduce using rule 17 (logical_expression -> equality_expression .)
    DOUBLE_PIPE     reduce using rule 17 (logical_expression -> equality_expression .)
    SEMICOLON       reduce using rule 17 (logical_expression -> equality_expression .)
    RPAREN          reduce using rule 17 (logical_expression -> equality_expression .)
    LESS            reduce using rule 17 (logical_expression -> equality_expression .)
    GREATER         reduce using rule 17 (logical_expression -> equality_expression .)
    LESS_EQ         reduce using rule 17 (logical_expression -> equality_expression .)
    GREATER_EQ      reduce using rule 17 (logical_expression -> equality_expression .)
    COMMA           reduce using rule 17 (logical_expression -> equality_expression .)
    EQ              shift and go to state 51
    NOT_EQ          shift and go to state 52

  ! EQ              [ reduce using rule 17 (logical_expression -> equality_expression .) ]
  ! NOT_EQ          [ reduce using rule 17 (logical_expression -> equality_expression .) ]


state 21

    (51) type_specifier -> INT .

    ID              reduce using rule 51 (type_specifier -> INT .)


state 22

    (52) type_specifier -> CHAR .

    ID              reduce using rule 52 (type_specifier -> CHAR .)


state 23

    (53) type_specifier -> FLOAT .

    ID              reduce using rule 53 (type_specifier -> FLOAT .)


state 24

    (20) equality_expression -> relational_expression .
    (25) relational_expression -> relational_expression . LESS additive_expression
    (26) relational_expression -> relational_expression . GREATER additive_expression
    (27) relational_expression -> relational_expression . LESS_EQ additive_expression
    (28) relational_expression -> relational_expression . GREATER_EQ additive_expression

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    EQ              reduce using rule 20 (equality_expression -> relational_expression .)
    NOT_EQ          reduce using rule 20 (equality_expression -> relational_expression .)
    DOUBLE_AMPERSAND reduce using rule 20 (equality_expression -> relational_expression .)
    DOUBLE_PIPE     reduce using rule 20 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 20 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 20 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 20 (equality_expression -> relational_expression .)
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    LESS_EQ         shift and go to state 55
    GREATER_EQ      shift and go to state 56

  ! LESS            [ reduce using rule 20 (equality_expression -> relational_expression .) ]
  ! GREATER         [ reduce using rule 20 (equality_expression -> relational_expression .) ]
  ! LESS_EQ         [ reduce using rule 20 (equality_expression -> relational_expression .) ]
  ! GREATER_EQ      [ reduce using rule 20 (equality_expression -> relational_expression .) ]


state 25

    (23) relational_expression -> additive_expression .
    (29) additive_expression -> additive_expression . PLUS mult_expression
    (30) additive_expression -> additive_expression . MINUS mult_expression

    LESS            reduce using rule 23 (relational_expression -> additive_expression .)
    GREATER         reduce using rule 23 (relational_expression -> additive_expression .)
    LESS_EQ         reduce using rule 23 (relational_expression -> additive_expression .)
    GREATER_EQ      reduce using rule 23 (relational_expression -> additive_expression .)
    EQ              reduce using rule 23 (relational_expression -> additive_expression .)
    NOT_EQ          reduce using rule 23 (relational_expression -> additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 23 (relational_expression -> additive_expression .)
    DOUBLE_PIPE     reduce using rule 23 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 23 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 23 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 23 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58


state 26

    (24) relational_expression -> assignation .

    LESS            reduce using rule 24 (relational_expression -> assignation .)
    GREATER         reduce using rule 24 (relational_expression -> assignation .)
    LESS_EQ         reduce using rule 24 (relational_expression -> assignation .)
    GREATER_EQ      reduce using rule 24 (relational_expression -> assignation .)
    EQ              reduce using rule 24 (relational_expression -> assignation .)
    NOT_EQ          reduce using rule 24 (relational_expression -> assignation .)
    DOUBLE_AMPERSAND reduce using rule 24 (relational_expression -> assignation .)
    DOUBLE_PIPE     reduce using rule 24 (relational_expression -> assignation .)
    SEMICOLON       reduce using rule 24 (relational_expression -> assignation .)
    RPAREN          reduce using rule 24 (relational_expression -> assignation .)
    COMMA           reduce using rule 24 (relational_expression -> assignation .)


state 27

    (38) unary_expression -> PLUS . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    ID              shift and go to state 60
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    unary_expression               shift and go to state 59
    postfix_expression             shift and go to state 31
    primary_expression             shift and go to state 34

state 28

    (31) additive_expression -> mult_expression .
    (32) mult_expression -> mult_expression . TIMES postfix_expression
    (33) mult_expression -> mult_expression . DIV postfix_expression
    (34) mult_expression -> mult_expression . MODULO postfix_expression

    PLUS            reduce using rule 31 (additive_expression -> mult_expression .)
    MINUS           reduce using rule 31 (additive_expression -> mult_expression .)
    LESS            reduce using rule 31 (additive_expression -> mult_expression .)
    GREATER         reduce using rule 31 (additive_expression -> mult_expression .)
    LESS_EQ         reduce using rule 31 (additive_expression -> mult_expression .)
    GREATER_EQ      reduce using rule 31 (additive_expression -> mult_expression .)
    EQ              reduce using rule 31 (additive_expression -> mult_expression .)
    NOT_EQ          reduce using rule 31 (additive_expression -> mult_expression .)
    DOUBLE_AMPERSAND reduce using rule 31 (additive_expression -> mult_expression .)
    DOUBLE_PIPE     reduce using rule 31 (additive_expression -> mult_expression .)
    SEMICOLON       reduce using rule 31 (additive_expression -> mult_expression .)
    RPAREN          reduce using rule 31 (additive_expression -> mult_expression .)
    COMMA           reduce using rule 31 (additive_expression -> mult_expression .)
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    MODULO          shift and go to state 63


state 29

    (37) unary_expression -> MINUS . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    ID              shift and go to state 60
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    unary_expression               shift and go to state 64
    postfix_expression             shift and go to state 31
    primary_expression             shift and go to state 34

state 30

    (15) assignation -> ID . ASSIGN expression
    (40) primary_expression -> ID .

    ASSIGN          shift and go to state 65
    LPAREN          reduce using rule 40 (primary_expression -> ID .)
    TIMES           reduce using rule 40 (primary_expression -> ID .)
    DIV             reduce using rule 40 (primary_expression -> ID .)
    MODULO          reduce using rule 40 (primary_expression -> ID .)
    PLUS            reduce using rule 40 (primary_expression -> ID .)
    MINUS           reduce using rule 40 (primary_expression -> ID .)
    LESS            reduce using rule 40 (primary_expression -> ID .)
    GREATER         reduce using rule 40 (primary_expression -> ID .)
    LESS_EQ         reduce using rule 40 (primary_expression -> ID .)
    GREATER_EQ      reduce using rule 40 (primary_expression -> ID .)
    EQ              reduce using rule 40 (primary_expression -> ID .)
    NOT_EQ          reduce using rule 40 (primary_expression -> ID .)
    DOUBLE_AMPERSAND reduce using rule 40 (primary_expression -> ID .)
    DOUBLE_PIPE     reduce using rule 40 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 40 (primary_expression -> ID .)
    RPAREN          reduce using rule 40 (primary_expression -> ID .)
    COMMA           reduce using rule 40 (primary_expression -> ID .)


state 31

    (36) unary_expression -> postfix_expression .
    (47) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> postfix_expression . LPAREN RPAREN

    TIMES           reduce using rule 36 (unary_expression -> postfix_expression .)
    DIV             reduce using rule 36 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 36 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 36 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 36 (unary_expression -> postfix_expression .)
    LESS            reduce using rule 36 (unary_expression -> postfix_expression .)
    GREATER         reduce using rule 36 (unary_expression -> postfix_expression .)
    LESS_EQ         reduce using rule 36 (unary_expression -> postfix_expression .)
    GREATER_EQ      reduce using rule 36 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 36 (unary_expression -> postfix_expression .)
    NOT_EQ          reduce using rule 36 (unary_expression -> postfix_expression .)
    DOUBLE_AMPERSAND reduce using rule 36 (unary_expression -> postfix_expression .)
    DOUBLE_PIPE     reduce using rule 36 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 36 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 36 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 36 (unary_expression -> postfix_expression .)
    LPAREN          shift and go to state 66


state 32

    (35) mult_expression -> unary_expression .

    TIMES           reduce using rule 35 (mult_expression -> unary_expression .)
    DIV             reduce using rule 35 (mult_expression -> unary_expression .)
    MODULO          reduce using rule 35 (mult_expression -> unary_expression .)
    PLUS            reduce using rule 35 (mult_expression -> unary_expression .)
    MINUS           reduce using rule 35 (mult_expression -> unary_expression .)
    LESS            reduce using rule 35 (mult_expression -> unary_expression .)
    GREATER         reduce using rule 35 (mult_expression -> unary_expression .)
    LESS_EQ         reduce using rule 35 (mult_expression -> unary_expression .)
    GREATER_EQ      reduce using rule 35 (mult_expression -> unary_expression .)
    EQ              reduce using rule 35 (mult_expression -> unary_expression .)
    NOT_EQ          reduce using rule 35 (mult_expression -> unary_expression .)
    DOUBLE_AMPERSAND reduce using rule 35 (mult_expression -> unary_expression .)
    DOUBLE_PIPE     reduce using rule 35 (mult_expression -> unary_expression .)
    SEMICOLON       reduce using rule 35 (mult_expression -> unary_expression .)
    RPAREN          reduce using rule 35 (mult_expression -> unary_expression .)
    COMMA           reduce using rule 35 (mult_expression -> unary_expression .)


state 33

    (39) unary_expression -> EXCLAMATION . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    ID              shift and go to state 60
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    unary_expression               shift and go to state 67
    postfix_expression             shift and go to state 31
    primary_expression             shift and go to state 34

state 34

    (46) postfix_expression -> primary_expression .

    LPAREN          reduce using rule 46 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 46 (postfix_expression -> primary_expression .)
    DIV             reduce using rule 46 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 46 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 46 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 46 (postfix_expression -> primary_expression .)
    LESS            reduce using rule 46 (postfix_expression -> primary_expression .)
    GREATER         reduce using rule 46 (postfix_expression -> primary_expression .)
    LESS_EQ         reduce using rule 46 (postfix_expression -> primary_expression .)
    GREATER_EQ      reduce using rule 46 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 46 (postfix_expression -> primary_expression .)
    NOT_EQ          reduce using rule 46 (postfix_expression -> primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 46 (postfix_expression -> primary_expression .)
    DOUBLE_PIPE     reduce using rule 46 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 46 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 46 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 46 (postfix_expression -> primary_expression .)


state 35

    (41) primary_expression -> INUMBER .

    LPAREN          reduce using rule 41 (primary_expression -> INUMBER .)
    TIMES           reduce using rule 41 (primary_expression -> INUMBER .)
    DIV             reduce using rule 41 (primary_expression -> INUMBER .)
    MODULO          reduce using rule 41 (primary_expression -> INUMBER .)
    PLUS            reduce using rule 41 (primary_expression -> INUMBER .)
    MINUS           reduce using rule 41 (primary_expression -> INUMBER .)
    LESS            reduce using rule 41 (primary_expression -> INUMBER .)
    GREATER         reduce using rule 41 (primary_expression -> INUMBER .)
    LESS_EQ         reduce using rule 41 (primary_expression -> INUMBER .)
    GREATER_EQ      reduce using rule 41 (primary_expression -> INUMBER .)
    EQ              reduce using rule 41 (primary_expression -> INUMBER .)
    NOT_EQ          reduce using rule 41 (primary_expression -> INUMBER .)
    DOUBLE_AMPERSAND reduce using rule 41 (primary_expression -> INUMBER .)
    DOUBLE_PIPE     reduce using rule 41 (primary_expression -> INUMBER .)
    SEMICOLON       reduce using rule 41 (primary_expression -> INUMBER .)
    RPAREN          reduce using rule 41 (primary_expression -> INUMBER .)
    COMMA           reduce using rule 41 (primary_expression -> INUMBER .)


state 36

    (42) primary_expression -> FNUMBER .

    LPAREN          reduce using rule 42 (primary_expression -> FNUMBER .)
    TIMES           reduce using rule 42 (primary_expression -> FNUMBER .)
    DIV             reduce using rule 42 (primary_expression -> FNUMBER .)
    MODULO          reduce using rule 42 (primary_expression -> FNUMBER .)
    PLUS            reduce using rule 42 (primary_expression -> FNUMBER .)
    MINUS           reduce using rule 42 (primary_expression -> FNUMBER .)
    LESS            reduce using rule 42 (primary_expression -> FNUMBER .)
    GREATER         reduce using rule 42 (primary_expression -> FNUMBER .)
    LESS_EQ         reduce using rule 42 (primary_expression -> FNUMBER .)
    GREATER_EQ      reduce using rule 42 (primary_expression -> FNUMBER .)
    EQ              reduce using rule 42 (primary_expression -> FNUMBER .)
    NOT_EQ          reduce using rule 42 (primary_expression -> FNUMBER .)
    DOUBLE_AMPERSAND reduce using rule 42 (primary_expression -> FNUMBER .)
    DOUBLE_PIPE     reduce using rule 42 (primary_expression -> FNUMBER .)
    SEMICOLON       reduce using rule 42 (primary_expression -> FNUMBER .)
    RPAREN          reduce using rule 42 (primary_expression -> FNUMBER .)
    COMMA           reduce using rule 42 (primary_expression -> FNUMBER .)


state 37

    (2) programme -> statement programme .

    $end            reduce using rule 2 (programme -> statement programme .)
    RBRACE          reduce using rule 2 (programme -> statement programme .)


state 38

    (11) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression                     shift and go to state 68
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 39

    (43) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 69


state 40

    (9) expression_statement -> expression SEMICOLON .

    WHILE           reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    ID              reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    EXCLAMATION     reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    INUMBER         reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    FNUMBER         reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    $end            reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 9 (expression_statement -> expression SEMICOLON .)


state 41

    (12) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (9) expression_statement -> . expression SEMICOLON
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression_statement           shift and go to state 70
    expression                     shift and go to state 11
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 42

    (10) compound_statement -> LBRACE programme . RBRACE

    RBRACE          shift and go to state 71


state 43

    (13) selection_statement -> IF LPAREN . expression RPAREN statement
    (14) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression                     shift and go to state 72
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 44

    (44) return_statement -> RETURN SEMICOLON .

    WHILE           reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    EXCLAMATION     reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    INUMBER         reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    FNUMBER         reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    $end            reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 44 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 44 (return_statement -> RETURN SEMICOLON .)


state 45

    (45) return_statement -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 73


state 46

    (18) logical_expression -> logical_expression DOUBLE_AMPERSAND . equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    equality_expression            shift and go to state 74
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 47

    (19) logical_expression -> logical_expression DOUBLE_PIPE . equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 48

    (56) function_definition -> type_specifier declarator . compound_statement
    (57) declaration -> type_specifier declarator . SEMICOLON
    (10) compound_statement -> . LBRACE programme RBRACE

    SEMICOLON       shift and go to state 77
    LBRACE          shift and go to state 13

    compound_statement             shift and go to state 76

state 49

    (58) declarator -> direct_declarator .
    (60) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (61) direct_declarator -> direct_declarator . LPAREN RPAREN

    SEMICOLON       reduce using rule 58 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 58 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 58 (declarator -> direct_declarator .)
    COMMA           reduce using rule 58 (declarator -> direct_declarator .)
    LPAREN          shift and go to state 78


state 50

    (59) direct_declarator -> ID .

    LPAREN          reduce using rule 59 (direct_declarator -> ID .)
    SEMICOLON       reduce using rule 59 (direct_declarator -> ID .)
    LBRACE          reduce using rule 59 (direct_declarator -> ID .)
    RPAREN          reduce using rule 59 (direct_declarator -> ID .)
    COMMA           reduce using rule 59 (direct_declarator -> ID .)


state 51

    (21) equality_expression -> equality_expression EQ . relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    relational_expression          shift and go to state 79
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 52

    (22) equality_expression -> equality_expression NOT_EQ . relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    relational_expression          shift and go to state 80
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 53

    (25) relational_expression -> relational_expression LESS . additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    ID              shift and go to state 60
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    additive_expression            shift and go to state 81
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 54

    (26) relational_expression -> relational_expression GREATER . additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    ID              shift and go to state 60
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    additive_expression            shift and go to state 82
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 55

    (27) relational_expression -> relational_expression LESS_EQ . additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    ID              shift and go to state 60
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    additive_expression            shift and go to state 83
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 56

    (28) relational_expression -> relational_expression GREATER_EQ . additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    ID              shift and go to state 60
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    additive_expression            shift and go to state 84
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 57

    (29) additive_expression -> additive_expression PLUS . mult_expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    ID              shift and go to state 60
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    mult_expression                shift and go to state 85
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 58

    (30) additive_expression -> additive_expression MINUS . mult_expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    ID              shift and go to state 60
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    mult_expression                shift and go to state 86
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 59

    (38) unary_expression -> PLUS unary_expression .

    TIMES           reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    DIV             reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    MODULO          reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    LESS            reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    GREATER         reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    LESS_EQ         reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    GREATER_EQ      reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    EQ              reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    NOT_EQ          reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    DOUBLE_AMPERSAND reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    DOUBLE_PIPE     reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    SEMICOLON       reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 38 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 38 (unary_expression -> PLUS unary_expression .)


state 60

    (40) primary_expression -> ID .

    LPAREN          reduce using rule 40 (primary_expression -> ID .)
    TIMES           reduce using rule 40 (primary_expression -> ID .)
    DIV             reduce using rule 40 (primary_expression -> ID .)
    MODULO          reduce using rule 40 (primary_expression -> ID .)
    PLUS            reduce using rule 40 (primary_expression -> ID .)
    MINUS           reduce using rule 40 (primary_expression -> ID .)
    LESS            reduce using rule 40 (primary_expression -> ID .)
    GREATER         reduce using rule 40 (primary_expression -> ID .)
    LESS_EQ         reduce using rule 40 (primary_expression -> ID .)
    GREATER_EQ      reduce using rule 40 (primary_expression -> ID .)
    EQ              reduce using rule 40 (primary_expression -> ID .)
    NOT_EQ          reduce using rule 40 (primary_expression -> ID .)
    DOUBLE_AMPERSAND reduce using rule 40 (primary_expression -> ID .)
    DOUBLE_PIPE     reduce using rule 40 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 40 (primary_expression -> ID .)
    RPAREN          reduce using rule 40 (primary_expression -> ID .)
    COMMA           reduce using rule 40 (primary_expression -> ID .)


state 61

    (32) mult_expression -> mult_expression TIMES . postfix_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 60
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    postfix_expression             shift and go to state 87
    primary_expression             shift and go to state 34

state 62

    (33) mult_expression -> mult_expression DIV . postfix_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 60
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    postfix_expression             shift and go to state 88
    primary_expression             shift and go to state 34

state 63

    (34) mult_expression -> mult_expression MODULO . postfix_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 60
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    postfix_expression             shift and go to state 89
    primary_expression             shift and go to state 34

state 64

    (37) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    DIV             reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    LESS            reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    GREATER         reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    LESS_EQ         reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    GREATER_EQ      reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    EQ              reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    NOT_EQ          reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    DOUBLE_AMPERSAND reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    DOUBLE_PIPE     reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 37 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 37 (unary_expression -> MINUS unary_expression .)


state 65

    (15) assignation -> ID ASSIGN . expression
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression                     shift and go to state 90
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 66

    (47) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (48) postfix_expression -> postfix_expression LPAREN . RPAREN
    (49) argument_expression_list -> . expression
    (50) argument_expression_list -> . argument_expression_list COMMA expression
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    RPAREN          shift and go to state 92
    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    postfix_expression             shift and go to state 31
    argument_expression_list       shift and go to state 91
    expression                     shift and go to state 93
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 67

    (39) unary_expression -> EXCLAMATION unary_expression .

    TIMES           reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    DIV             reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    MODULO          reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    PLUS            reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    MINUS           reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    LESS            reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER         reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_EQ         reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_EQ      reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    EQ              reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    NOT_EQ          reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    DOUBLE_AMPERSAND reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    DOUBLE_PIPE     reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    SEMICOLON       reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    RPAREN          reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)
    COMMA           reduce using rule 39 (unary_expression -> EXCLAMATION unary_expression .)


state 68

    (11) iteration_statement -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 94


state 69

    (43) primary_expression -> LPAREN expression RPAREN .

    LPAREN          reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 43 (primary_expression -> LPAREN expression RPAREN .)


state 70

    (12) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (9) expression_statement -> . expression SEMICOLON
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression_statement           shift and go to state 95
    expression                     shift and go to state 11
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 71

    (10) compound_statement -> LBRACE programme RBRACE .

    WHILE           reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    FOR             reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    LBRACE          reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    IF              reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    RETURN          reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    INT             reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    CHAR            reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    FLOAT           reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    ID              reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    MINUS           reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    PLUS            reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    EXCLAMATION     reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    INUMBER         reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    FNUMBER         reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    LPAREN          reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    $end            reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    RBRACE          reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    ELSE            reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)


state 72

    (13) selection_statement -> IF LPAREN expression . RPAREN statement
    (14) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 96


state 73

    (45) return_statement -> RETURN expression SEMICOLON .

    WHILE           reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    EXCLAMATION     reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    INUMBER         reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    FNUMBER         reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 45 (return_statement -> RETURN expression SEMICOLON .)


state 74

    (18) logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .
    (21) equality_expression -> equality_expression . EQ relational_expression
    (22) equality_expression -> equality_expression . NOT_EQ relational_expression

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
    DOUBLE_AMPERSAND reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    DOUBLE_PIPE     reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    SEMICOLON       reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    RPAREN          reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    LESS            reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    GREATER         reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    LESS_EQ         reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    GREATER_EQ      reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    COMMA           reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    EQ              shift and go to state 51
    NOT_EQ          shift and go to state 52

  ! EQ              [ reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .) ]
  ! NOT_EQ          [ reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .) ]


state 75

    (19) logical_expression -> logical_expression DOUBLE_PIPE equality_expression .
    (21) equality_expression -> equality_expression . EQ relational_expression
    (22) equality_expression -> equality_expression . NOT_EQ relational_expression

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
    DOUBLE_AMPERSAND reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    DOUBLE_PIPE     reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    SEMICOLON       reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    RPAREN          reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    LESS            reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    GREATER         reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    LESS_EQ         reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    GREATER_EQ      reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    COMMA           reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    EQ              shift and go to state 51
    NOT_EQ          shift and go to state 52

  ! EQ              [ reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .) ]
  ! NOT_EQ          [ reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .) ]


state 76

    (56) function_definition -> type_specifier declarator compound_statement .

    WHILE           reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    FOR             reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    LBRACE          reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    IF              reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    RETURN          reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    ID              reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    MINUS           reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    PLUS            reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    EXCLAMATION     reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    INUMBER         reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    FNUMBER         reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    LPAREN          reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    RBRACE          reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)
    ELSE            reduce using rule 56 (function_definition -> type_specifier declarator compound_statement .)


state 77

    (57) declaration -> type_specifier declarator SEMICOLON .

    WHILE           reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    FOR             reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    LBRACE          reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    IF              reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    RETURN          reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    INT             reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    CHAR            reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    FLOAT           reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    ID              reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    MINUS           reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    PLUS            reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    EXCLAMATION     reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    INUMBER         reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    FNUMBER         reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    LPAREN          reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    $end            reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    RBRACE          reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)
    ELSE            reduce using rule 57 (declaration -> type_specifier declarator SEMICOLON .)


state 78

    (60) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (61) direct_declarator -> direct_declarator LPAREN . RPAREN
    (62) parameter_list -> . parameter_declaration
    (63) parameter_list -> . parameter_list COMMA parameter_declaration
    (64) parameter_declaration -> . type_specifier declarator
    (51) type_specifier -> . INT
    (52) type_specifier -> . CHAR
    (53) type_specifier -> . FLOAT

    RPAREN          shift and go to state 98
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23

    parameter_list                 shift and go to state 97
    parameter_declaration          shift and go to state 99
    type_specifier                 shift and go to state 100

state 79

    (21) equality_expression -> equality_expression EQ relational_expression .
    (25) relational_expression -> relational_expression . LESS additive_expression
    (26) relational_expression -> relational_expression . GREATER additive_expression
    (27) relational_expression -> relational_expression . LESS_EQ additive_expression
    (28) relational_expression -> relational_expression . GREATER_EQ additive_expression

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    EQ              reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    NOT_EQ          reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    DOUBLE_AMPERSAND reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    DOUBLE_PIPE     reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    SEMICOLON       reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    LESS_EQ         shift and go to state 55
    GREATER_EQ      shift and go to state 56

  ! LESS            [ reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .) ]
  ! GREATER         [ reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .) ]
  ! LESS_EQ         [ reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .) ]
  ! GREATER_EQ      [ reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .) ]


state 80

    (22) equality_expression -> equality_expression NOT_EQ relational_expression .
    (25) relational_expression -> relational_expression . LESS additive_expression
    (26) relational_expression -> relational_expression . GREATER additive_expression
    (27) relational_expression -> relational_expression . LESS_EQ additive_expression
    (28) relational_expression -> relational_expression . GREATER_EQ additive_expression

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    EQ              reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    NOT_EQ          reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    DOUBLE_AMPERSAND reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    DOUBLE_PIPE     reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    SEMICOLON       reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RPAREN          reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    COMMA           reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    LESS            shift and go to state 53
    GREATER         shift and go to state 54
    LESS_EQ         shift and go to state 55
    GREATER_EQ      shift and go to state 56

  ! LESS            [ reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .) ]
  ! GREATER         [ reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .) ]
  ! LESS_EQ         [ reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .) ]
  ! GREATER_EQ      [ reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .) ]


state 81

    (25) relational_expression -> relational_expression LESS additive_expression .
    (29) additive_expression -> additive_expression . PLUS mult_expression
    (30) additive_expression -> additive_expression . MINUS mult_expression

    LESS            reduce using rule 25 (relational_expression -> relational_expression LESS additive_expression .)
    GREATER         reduce using rule 25 (relational_expression -> relational_expression LESS additive_expression .)
    LESS_EQ         reduce using rule 25 (relational_expression -> relational_expression LESS additive_expression .)
    GREATER_EQ      reduce using rule 25 (relational_expression -> relational_expression LESS additive_expression .)
    EQ              reduce using rule 25 (relational_expression -> relational_expression LESS additive_expression .)
    NOT_EQ          reduce using rule 25 (relational_expression -> relational_expression LESS additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 25 (relational_expression -> relational_expression LESS additive_expression .)
    DOUBLE_PIPE     reduce using rule 25 (relational_expression -> relational_expression LESS additive_expression .)
    SEMICOLON       reduce using rule 25 (relational_expression -> relational_expression LESS additive_expression .)
    RPAREN          reduce using rule 25 (relational_expression -> relational_expression LESS additive_expression .)
    COMMA           reduce using rule 25 (relational_expression -> relational_expression LESS additive_expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58


state 82

    (26) relational_expression -> relational_expression GREATER additive_expression .
    (29) additive_expression -> additive_expression . PLUS mult_expression
    (30) additive_expression -> additive_expression . MINUS mult_expression

    LESS            reduce using rule 26 (relational_expression -> relational_expression GREATER additive_expression .)
    GREATER         reduce using rule 26 (relational_expression -> relational_expression GREATER additive_expression .)
    LESS_EQ         reduce using rule 26 (relational_expression -> relational_expression GREATER additive_expression .)
    GREATER_EQ      reduce using rule 26 (relational_expression -> relational_expression GREATER additive_expression .)
    EQ              reduce using rule 26 (relational_expression -> relational_expression GREATER additive_expression .)
    NOT_EQ          reduce using rule 26 (relational_expression -> relational_expression GREATER additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 26 (relational_expression -> relational_expression GREATER additive_expression .)
    DOUBLE_PIPE     reduce using rule 26 (relational_expression -> relational_expression GREATER additive_expression .)
    SEMICOLON       reduce using rule 26 (relational_expression -> relational_expression GREATER additive_expression .)
    RPAREN          reduce using rule 26 (relational_expression -> relational_expression GREATER additive_expression .)
    COMMA           reduce using rule 26 (relational_expression -> relational_expression GREATER additive_expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58


state 83

    (27) relational_expression -> relational_expression LESS_EQ additive_expression .
    (29) additive_expression -> additive_expression . PLUS mult_expression
    (30) additive_expression -> additive_expression . MINUS mult_expression

    LESS            reduce using rule 27 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    GREATER         reduce using rule 27 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    LESS_EQ         reduce using rule 27 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    GREATER_EQ      reduce using rule 27 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    EQ              reduce using rule 27 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    NOT_EQ          reduce using rule 27 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 27 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    DOUBLE_PIPE     reduce using rule 27 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    SEMICOLON       reduce using rule 27 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    RPAREN          reduce using rule 27 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    COMMA           reduce using rule 27 (relational_expression -> relational_expression LESS_EQ additive_expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58


state 84

    (28) relational_expression -> relational_expression GREATER_EQ additive_expression .
    (29) additive_expression -> additive_expression . PLUS mult_expression
    (30) additive_expression -> additive_expression . MINUS mult_expression

    LESS            reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    GREATER         reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    LESS_EQ         reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    GREATER_EQ      reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    EQ              reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    NOT_EQ          reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    DOUBLE_PIPE     reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    SEMICOLON       reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    RPAREN          reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    COMMA           reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ additive_expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58


state 85

    (29) additive_expression -> additive_expression PLUS mult_expression .
    (32) mult_expression -> mult_expression . TIMES postfix_expression
    (33) mult_expression -> mult_expression . DIV postfix_expression
    (34) mult_expression -> mult_expression . MODULO postfix_expression

    PLUS            reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    MINUS           reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    LESS            reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    GREATER         reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    LESS_EQ         reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    GREATER_EQ      reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    EQ              reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    NOT_EQ          reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    DOUBLE_AMPERSAND reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    DOUBLE_PIPE     reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    SEMICOLON       reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    RPAREN          reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    COMMA           reduce using rule 29 (additive_expression -> additive_expression PLUS mult_expression .)
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    MODULO          shift and go to state 63


state 86

    (30) additive_expression -> additive_expression MINUS mult_expression .
    (32) mult_expression -> mult_expression . TIMES postfix_expression
    (33) mult_expression -> mult_expression . DIV postfix_expression
    (34) mult_expression -> mult_expression . MODULO postfix_expression

    PLUS            reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    MINUS           reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    LESS            reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    GREATER         reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    LESS_EQ         reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    GREATER_EQ      reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    EQ              reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    NOT_EQ          reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    DOUBLE_AMPERSAND reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    DOUBLE_PIPE     reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    SEMICOLON       reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    RPAREN          reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    COMMA           reduce using rule 30 (additive_expression -> additive_expression MINUS mult_expression .)
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    MODULO          shift and go to state 63


state 87

    (32) mult_expression -> mult_expression TIMES postfix_expression .
    (47) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> postfix_expression . LPAREN RPAREN

    TIMES           reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    DIV             reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    MODULO          reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    PLUS            reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    MINUS           reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    LESS            reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    GREATER         reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    LESS_EQ         reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    GREATER_EQ      reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    EQ              reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    NOT_EQ          reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    DOUBLE_AMPERSAND reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    DOUBLE_PIPE     reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    SEMICOLON       reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    RPAREN          reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    COMMA           reduce using rule 32 (mult_expression -> mult_expression TIMES postfix_expression .)
    LPAREN          shift and go to state 66


state 88

    (33) mult_expression -> mult_expression DIV postfix_expression .
    (47) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> postfix_expression . LPAREN RPAREN

    TIMES           reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    DIV             reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    MODULO          reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    PLUS            reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    MINUS           reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    LESS            reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    GREATER         reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    LESS_EQ         reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    GREATER_EQ      reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    EQ              reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    NOT_EQ          reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    DOUBLE_AMPERSAND reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    DOUBLE_PIPE     reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    SEMICOLON       reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    RPAREN          reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    COMMA           reduce using rule 33 (mult_expression -> mult_expression DIV postfix_expression .)
    LPAREN          shift and go to state 66


state 89

    (34) mult_expression -> mult_expression MODULO postfix_expression .
    (47) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> postfix_expression . LPAREN RPAREN

    TIMES           reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    DIV             reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    MODULO          reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    PLUS            reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    MINUS           reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    LESS            reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    GREATER         reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    LESS_EQ         reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    GREATER_EQ      reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    EQ              reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    NOT_EQ          reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    DOUBLE_AMPERSAND reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    DOUBLE_PIPE     reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    SEMICOLON       reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    RPAREN          reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    COMMA           reduce using rule 34 (mult_expression -> mult_expression MODULO postfix_expression .)
    LPAREN          shift and go to state 66


state 90

    (15) assignation -> ID ASSIGN expression .

    LESS            reduce using rule 15 (assignation -> ID ASSIGN expression .)
    GREATER         reduce using rule 15 (assignation -> ID ASSIGN expression .)
    LESS_EQ         reduce using rule 15 (assignation -> ID ASSIGN expression .)
    GREATER_EQ      reduce using rule 15 (assignation -> ID ASSIGN expression .)
    EQ              reduce using rule 15 (assignation -> ID ASSIGN expression .)
    NOT_EQ          reduce using rule 15 (assignation -> ID ASSIGN expression .)
    DOUBLE_AMPERSAND reduce using rule 15 (assignation -> ID ASSIGN expression .)
    DOUBLE_PIPE     reduce using rule 15 (assignation -> ID ASSIGN expression .)
    SEMICOLON       reduce using rule 15 (assignation -> ID ASSIGN expression .)
    RPAREN          reduce using rule 15 (assignation -> ID ASSIGN expression .)
    COMMA           reduce using rule 15 (assignation -> ID ASSIGN expression .)


state 91

    (47) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (50) argument_expression_list -> argument_expression_list . COMMA expression

    RPAREN          shift and go to state 101
    COMMA           shift and go to state 102


state 92

    (48) postfix_expression -> postfix_expression LPAREN RPAREN .

    LPAREN          reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV             reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODULO          reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESS            reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATER         reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESS_EQ         reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATER_EQ      reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOT_EQ          reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOUBLE_PIPE     reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 48 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 93

    (49) argument_expression_list -> expression .

    RPAREN          reduce using rule 49 (argument_expression_list -> expression .)
    COMMA           reduce using rule 49 (argument_expression_list -> expression .)


state 94

    (11) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) external_declaration -> . function_definition
    (55) external_declaration -> . declaration
    (44) return_statement -> . RETURN SEMICOLON
    (45) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (56) function_definition -> . type_specifier declarator compound_statement
    (57) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (51) type_specifier -> . INT
    (52) type_specifier -> . CHAR
    (53) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression                     shift and go to state 11
    statement                      shift and go to state 103
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 95

    (12) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression                     shift and go to state 104
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 96

    (13) selection_statement -> IF LPAREN expression RPAREN . statement
    (14) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) external_declaration -> . function_definition
    (55) external_declaration -> . declaration
    (44) return_statement -> . RETURN SEMICOLON
    (45) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (56) function_definition -> . type_specifier declarator compound_statement
    (57) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (51) type_specifier -> . INT
    (52) type_specifier -> . CHAR
    (53) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression                     shift and go to state 11
    statement                      shift and go to state 105
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 97

    (60) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (63) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 106
    COMMA           shift and go to state 107


state 98

    (61) direct_declarator -> direct_declarator LPAREN RPAREN .

    LPAREN          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMICOLON       reduce using rule 61 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 61 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 99

    (62) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 62 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 62 (parameter_list -> parameter_declaration .)


state 100

    (64) parameter_declaration -> type_specifier . declarator
    (58) declarator -> . direct_declarator
    (59) direct_declarator -> . ID
    (60) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (61) direct_declarator -> . direct_declarator LPAREN RPAREN

    ID              shift and go to state 50

    declarator                     shift and go to state 108
    direct_declarator              shift and go to state 49

state 101

    (47) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LPAREN          reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV             reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODULO          reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LESS            reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GREATER         reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LESS_EQ         reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GREATER_EQ      reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NOT_EQ          reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DOUBLE_PIPE     reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMICOLON       reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 47 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 102

    (50) argument_expression_list -> argument_expression_list COMMA . expression
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression                     shift and go to state 109
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 103

    (11) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    WHILE           reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXCLAMATION     reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INUMBER         reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FNUMBER         reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    $end            reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 104

    (12) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement

    RPAREN          shift and go to state 110


state 105

    (13) selection_statement -> IF LPAREN expression RPAREN statement .
    (14) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

    WHILE           reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXCLAMATION     reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INUMBER         reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FNUMBER         reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 111

  ! ELSE            [ reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 106

    (60) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LPAREN          reduce using rule 60 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMICOLON       reduce using rule 60 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 60 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 60 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 60 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 107

    (63) parameter_list -> parameter_list COMMA . parameter_declaration
    (64) parameter_declaration -> . type_specifier declarator
    (51) type_specifier -> . INT
    (52) type_specifier -> . CHAR
    (53) type_specifier -> . FLOAT

    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23

    parameter_declaration          shift and go to state 112
    type_specifier                 shift and go to state 100

state 108

    (64) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 64 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 64 (parameter_declaration -> type_specifier declarator .)


state 109

    (50) argument_expression_list -> argument_expression_list COMMA expression .

    RPAREN          reduce using rule 50 (argument_expression_list -> argument_expression_list COMMA expression .)
    COMMA           reduce using rule 50 (argument_expression_list -> argument_expression_list COMMA expression .)


state 110

    (12) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) external_declaration -> . function_definition
    (55) external_declaration -> . declaration
    (44) return_statement -> . RETURN SEMICOLON
    (45) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (56) function_definition -> . type_specifier declarator compound_statement
    (57) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (51) type_specifier -> . INT
    (52) type_specifier -> . CHAR
    (53) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression_statement           shift and go to state 5
    expression                     shift and go to state 11
    statement                      shift and go to state 113
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 111

    (14) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (54) external_declaration -> . function_definition
    (55) external_declaration -> . declaration
    (44) return_statement -> . RETURN SEMICOLON
    (45) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (56) function_definition -> . type_specifier declarator compound_statement
    (57) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (51) type_specifier -> . INT
    (52) type_specifier -> . CHAR
    (53) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . additive_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS additive_expression
    (26) relational_expression -> . relational_expression GREATER additive_expression
    (27) relational_expression -> . relational_expression LESS_EQ additive_expression
    (28) relational_expression -> . relational_expression GREATER_EQ additive_expression
    (29) additive_expression -> . additive_expression PLUS mult_expression
    (30) additive_expression -> . additive_expression MINUS mult_expression
    (31) additive_expression -> . mult_expression
    (15) assignation -> . ID ASSIGN expression
    (32) mult_expression -> . mult_expression TIMES postfix_expression
    (33) mult_expression -> . mult_expression DIV postfix_expression
    (34) mult_expression -> . mult_expression MODULO postfix_expression
    (35) mult_expression -> . unary_expression
    (36) unary_expression -> . postfix_expression
    (37) unary_expression -> . MINUS unary_expression
    (38) unary_expression -> . PLUS unary_expression
    (39) unary_expression -> . EXCLAMATION unary_expression
    (46) postfix_expression -> . primary_expression
    (47) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (48) postfix_expression -> . postfix_expression LPAREN RPAREN
    (40) primary_expression -> . ID
    (41) primary_expression -> . INUMBER
    (42) primary_expression -> . FNUMBER
    (43) primary_expression -> . LPAREN expression RPAREN

    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 30
    MINUS           shift and go to state 29
    PLUS            shift and go to state 27
    EXCLAMATION     shift and go to state 33
    INUMBER         shift and go to state 35
    FNUMBER         shift and go to state 36
    LPAREN          shift and go to state 10

    expression                     shift and go to state 11
    statement                      shift and go to state 114
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    additive_expression            shift and go to state 25
    assignation                    shift and go to state 26
    mult_expression                shift and go to state 28
    postfix_expression             shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 34

state 112

    (63) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 63 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 63 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 113

    (12) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    WHILE           reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INT             reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHAR            reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FLOAT           reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ID              reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    EXCLAMATION     reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INUMBER         reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FNUMBER         reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    $end            reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RBRACE          reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 114

    (14) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    WHILE           reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXCLAMATION     reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INUMBER         reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FNUMBER         reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    $end            reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOUBLE_AMPERSAND in state 18 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_PIPE in state 18 resolved as shift
WARNING: shift/reduce conflict for EQ in state 20 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 20 resolved as shift
WARNING: shift/reduce conflict for LESS in state 24 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 24 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 24 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 24 resolved as shift
WARNING: shift/reduce conflict for EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for EQ in state 75 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 75 resolved as shift
WARNING: shift/reduce conflict for LESS in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 80 resolved as shift
