Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    SHORT
    DOUBLE
    LONG
    VOID
    CARET
    DOT
    EQ_PLUS
    EQ_MINUS
    EQ_TIMES
    EQ_DIV
    STRING
    CHARACTER

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement programme
Rule 3     statement -> iteration_statement
Rule 4     statement -> compound_statement
Rule 5     statement -> expression_statement
Rule 6     statement -> selection_statement
Rule 7     statement -> external_declaration
Rule 8     statement -> return_statement
Rule 9     expression_statement -> expression SEMICOLON
Rule 10    compound_statement -> LBRACE programme RBRACE
Rule 11    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 12    iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 13    selection_statement -> IF LPAREN expression RPAREN statement
Rule 14    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 15    assignation -> ID ASSIGN expression
Rule 16    expression -> logical_expression
Rule 17    logical_expression -> equality_expression
Rule 18    logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression
Rule 19    logical_expression -> logical_expression DOUBLE_PIPE equality_expression
Rule 20    equality_expression -> relational_expression
Rule 21    equality_expression -> equality_expression EQ relational_expression
Rule 22    equality_expression -> equality_expression NOT_EQ relational_expression
Rule 23    relational_expression -> op_expression
Rule 24    relational_expression -> assignation
Rule 25    relational_expression -> relational_expression LESS op_expression
Rule 26    relational_expression -> relational_expression GREATER op_expression
Rule 27    relational_expression -> relational_expression LESS_EQ op_expression
Rule 28    relational_expression -> relational_expression GREATER_EQ op_expression
Rule 29    op_expression -> op_expression PLUS primary_expression
Rule 30    op_expression -> op_expression MINUS primary_expression
Rule 31    op_expression -> op_expression TIMES primary_expression
Rule 32    op_expression -> op_expression DIV primary_expression
Rule 33    op_expression -> op_expression MODULO primary_expression
Rule 34    op_expression -> primary_expression
Rule 35    primary_expression -> ID
Rule 36    primary_expression -> INUMBER
Rule 37    primary_expression -> FNUMBER
Rule 38    primary_expression -> LPAREN expression RPAREN
Rule 39    return_statement -> RETURN SEMICOLON
Rule 40    return_statement -> RETURN expression SEMICOLON
Rule 41    type_specifier -> INT
Rule 42    type_specifier -> CHAR
Rule 43    type_specifier -> FLOAT
Rule 44    external_declaration -> function_definition
Rule 45    external_declaration -> declaration
Rule 46    function_definition -> type_specifier declarator compound_statement
Rule 47    declaration -> type_specifier declarator SEMICOLON
Rule 48    declarator -> direct_declarator
Rule 49    direct_declarator -> ID
Rule 50    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 51    direct_declarator -> direct_declarator LPAREN RPAREN
Rule 52    parameter_list -> parameter_declaration
Rule 53    parameter_list -> parameter_list COMMA parameter_declaration
Rule 54    parameter_declaration -> type_specifier declarator

Terminals, with rules where they appear

ASSIGN               : 15
CARET                : 
CHAR                 : 42
CHARACTER            : 
COMMA                : 53
DIV                  : 32
DOT                  : 
DOUBLE               : 
DOUBLE_AMPERSAND     : 18
DOUBLE_PIPE          : 19
ELSE                 : 14
EQ                   : 21
EQ_DIV               : 
EQ_MINUS             : 
EQ_PLUS              : 
EQ_TIMES             : 
FLOAT                : 43
FNUMBER              : 37
FOR                  : 12
GREATER              : 26
GREATER_EQ           : 28
ID                   : 15 35 49
IF                   : 13 14
INT                  : 41
INUMBER              : 36
LBRACE               : 10
LESS                 : 25
LESS_EQ              : 27
LONG                 : 
LPAREN               : 11 12 13 14 38 50 51
MINUS                : 30
MODULO               : 33
NOT_EQ               : 22
PLUS                 : 29
RBRACE               : 10
RETURN               : 39 40
RPAREN               : 11 12 13 14 38 50 51
SEMICOLON            : 9 39 40 47
SHORT                : 
STRING               : 
TIMES                : 31
VOID                 : 
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

assignation          : 24
compound_statement   : 4 46
declaration          : 45
declarator           : 46 47 54
direct_declarator    : 48 50 51
equality_expression  : 17 18 19 21 22
expression           : 9 11 12 13 14 15 38 40
expression_statement : 5 12 12
external_declaration : 7
function_definition  : 44
iteration_statement  : 3
logical_expression   : 16 18 19
op_expression        : 23 25 26 27 28 29 30 31 32 33
parameter_declaration : 52 53
parameter_list       : 50 53
primary_expression   : 29 30 31 32 33 34
programme            : 2 10 0
relational_expression : 20 21 22 25 26 27 28
return_statement     : 8
selection_statement  : 6
statement            : 1 2 11 12 13 14 14
type_specifier       : 46 47 54

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) external_declaration -> . function_definition
    (45) external_declaration -> . declaration
    (39) return_statement -> . RETURN SEMICOLON
    (40) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (46) function_definition -> . type_specifier declarator compound_statement
    (47) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (41) type_specifier -> . INT
    (42) type_specifier -> . CHAR
    (43) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    expression                     shift and go to state 11
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . programme
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) external_declaration -> . function_definition
    (45) external_declaration -> . declaration
    (39) return_statement -> . RETURN SEMICOLON
    (40) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (46) function_definition -> . type_specifier declarator compound_statement
    (47) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (41) type_specifier -> . INT
    (42) type_specifier -> . CHAR
    (43) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    $end            reduce using rule 1 (programme -> statement .)
    RBRACE          reduce using rule 1 (programme -> statement .)
    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    statement                      shift and go to state 2
    programme                      shift and go to state 31
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    expression                     shift and go to state 11
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 3

    (3) statement -> iteration_statement .

    WHILE           reduce using rule 3 (statement -> iteration_statement .)
    FOR             reduce using rule 3 (statement -> iteration_statement .)
    LBRACE          reduce using rule 3 (statement -> iteration_statement .)
    IF              reduce using rule 3 (statement -> iteration_statement .)
    RETURN          reduce using rule 3 (statement -> iteration_statement .)
    INT             reduce using rule 3 (statement -> iteration_statement .)
    CHAR            reduce using rule 3 (statement -> iteration_statement .)
    FLOAT           reduce using rule 3 (statement -> iteration_statement .)
    ID              reduce using rule 3 (statement -> iteration_statement .)
    INUMBER         reduce using rule 3 (statement -> iteration_statement .)
    FNUMBER         reduce using rule 3 (statement -> iteration_statement .)
    LPAREN          reduce using rule 3 (statement -> iteration_statement .)
    $end            reduce using rule 3 (statement -> iteration_statement .)
    RBRACE          reduce using rule 3 (statement -> iteration_statement .)
    ELSE            reduce using rule 3 (statement -> iteration_statement .)


state 4

    (4) statement -> compound_statement .

    WHILE           reduce using rule 4 (statement -> compound_statement .)
    FOR             reduce using rule 4 (statement -> compound_statement .)
    LBRACE          reduce using rule 4 (statement -> compound_statement .)
    IF              reduce using rule 4 (statement -> compound_statement .)
    RETURN          reduce using rule 4 (statement -> compound_statement .)
    INT             reduce using rule 4 (statement -> compound_statement .)
    CHAR            reduce using rule 4 (statement -> compound_statement .)
    FLOAT           reduce using rule 4 (statement -> compound_statement .)
    ID              reduce using rule 4 (statement -> compound_statement .)
    INUMBER         reduce using rule 4 (statement -> compound_statement .)
    FNUMBER         reduce using rule 4 (statement -> compound_statement .)
    LPAREN          reduce using rule 4 (statement -> compound_statement .)
    $end            reduce using rule 4 (statement -> compound_statement .)
    RBRACE          reduce using rule 4 (statement -> compound_statement .)
    ELSE            reduce using rule 4 (statement -> compound_statement .)


state 5

    (5) statement -> expression_statement .

    WHILE           reduce using rule 5 (statement -> expression_statement .)
    FOR             reduce using rule 5 (statement -> expression_statement .)
    LBRACE          reduce using rule 5 (statement -> expression_statement .)
    IF              reduce using rule 5 (statement -> expression_statement .)
    RETURN          reduce using rule 5 (statement -> expression_statement .)
    INT             reduce using rule 5 (statement -> expression_statement .)
    CHAR            reduce using rule 5 (statement -> expression_statement .)
    FLOAT           reduce using rule 5 (statement -> expression_statement .)
    ID              reduce using rule 5 (statement -> expression_statement .)
    INUMBER         reduce using rule 5 (statement -> expression_statement .)
    FNUMBER         reduce using rule 5 (statement -> expression_statement .)
    LPAREN          reduce using rule 5 (statement -> expression_statement .)
    $end            reduce using rule 5 (statement -> expression_statement .)
    RBRACE          reduce using rule 5 (statement -> expression_statement .)
    ELSE            reduce using rule 5 (statement -> expression_statement .)


state 6

    (6) statement -> selection_statement .

    WHILE           reduce using rule 6 (statement -> selection_statement .)
    FOR             reduce using rule 6 (statement -> selection_statement .)
    LBRACE          reduce using rule 6 (statement -> selection_statement .)
    IF              reduce using rule 6 (statement -> selection_statement .)
    RETURN          reduce using rule 6 (statement -> selection_statement .)
    INT             reduce using rule 6 (statement -> selection_statement .)
    CHAR            reduce using rule 6 (statement -> selection_statement .)
    FLOAT           reduce using rule 6 (statement -> selection_statement .)
    ID              reduce using rule 6 (statement -> selection_statement .)
    INUMBER         reduce using rule 6 (statement -> selection_statement .)
    FNUMBER         reduce using rule 6 (statement -> selection_statement .)
    LPAREN          reduce using rule 6 (statement -> selection_statement .)
    $end            reduce using rule 6 (statement -> selection_statement .)
    RBRACE          reduce using rule 6 (statement -> selection_statement .)
    ELSE            reduce using rule 6 (statement -> selection_statement .)


state 7

    (7) statement -> external_declaration .

    WHILE           reduce using rule 7 (statement -> external_declaration .)
    FOR             reduce using rule 7 (statement -> external_declaration .)
    LBRACE          reduce using rule 7 (statement -> external_declaration .)
    IF              reduce using rule 7 (statement -> external_declaration .)
    RETURN          reduce using rule 7 (statement -> external_declaration .)
    INT             reduce using rule 7 (statement -> external_declaration .)
    CHAR            reduce using rule 7 (statement -> external_declaration .)
    FLOAT           reduce using rule 7 (statement -> external_declaration .)
    ID              reduce using rule 7 (statement -> external_declaration .)
    INUMBER         reduce using rule 7 (statement -> external_declaration .)
    FNUMBER         reduce using rule 7 (statement -> external_declaration .)
    LPAREN          reduce using rule 7 (statement -> external_declaration .)
    $end            reduce using rule 7 (statement -> external_declaration .)
    RBRACE          reduce using rule 7 (statement -> external_declaration .)
    ELSE            reduce using rule 7 (statement -> external_declaration .)


state 8

    (8) statement -> return_statement .

    WHILE           reduce using rule 8 (statement -> return_statement .)
    FOR             reduce using rule 8 (statement -> return_statement .)
    LBRACE          reduce using rule 8 (statement -> return_statement .)
    IF              reduce using rule 8 (statement -> return_statement .)
    RETURN          reduce using rule 8 (statement -> return_statement .)
    INT             reduce using rule 8 (statement -> return_statement .)
    CHAR            reduce using rule 8 (statement -> return_statement .)
    FLOAT           reduce using rule 8 (statement -> return_statement .)
    ID              reduce using rule 8 (statement -> return_statement .)
    INUMBER         reduce using rule 8 (statement -> return_statement .)
    FNUMBER         reduce using rule 8 (statement -> return_statement .)
    LPAREN          reduce using rule 8 (statement -> return_statement .)
    $end            reduce using rule 8 (statement -> return_statement .)
    RBRACE          reduce using rule 8 (statement -> return_statement .)
    ELSE            reduce using rule 8 (statement -> return_statement .)


state 9

    (11) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 32


state 10

    (38) primary_expression -> LPAREN . expression RPAREN
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    expression                     shift and go to state 33
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 11

    (9) expression_statement -> expression . SEMICOLON

    SEMICOLON       shift and go to state 34


state 12

    (12) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN          shift and go to state 35


state 13

    (10) compound_statement -> LBRACE . programme RBRACE
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) external_declaration -> . function_definition
    (45) external_declaration -> . declaration
    (39) return_statement -> . RETURN SEMICOLON
    (40) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (46) function_definition -> . type_specifier declarator compound_statement
    (47) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (41) type_specifier -> . INT
    (42) type_specifier -> . CHAR
    (43) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    programme                      shift and go to state 36
    statement                      shift and go to state 2
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    expression                     shift and go to state 11
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 14

    (13) selection_statement -> IF . LPAREN expression RPAREN statement
    (14) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 37


state 15

    (44) external_declaration -> function_definition .

    WHILE           reduce using rule 44 (external_declaration -> function_definition .)
    FOR             reduce using rule 44 (external_declaration -> function_definition .)
    LBRACE          reduce using rule 44 (external_declaration -> function_definition .)
    IF              reduce using rule 44 (external_declaration -> function_definition .)
    RETURN          reduce using rule 44 (external_declaration -> function_definition .)
    INT             reduce using rule 44 (external_declaration -> function_definition .)
    CHAR            reduce using rule 44 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 44 (external_declaration -> function_definition .)
    ID              reduce using rule 44 (external_declaration -> function_definition .)
    INUMBER         reduce using rule 44 (external_declaration -> function_definition .)
    FNUMBER         reduce using rule 44 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 44 (external_declaration -> function_definition .)
    $end            reduce using rule 44 (external_declaration -> function_definition .)
    RBRACE          reduce using rule 44 (external_declaration -> function_definition .)
    ELSE            reduce using rule 44 (external_declaration -> function_definition .)


state 16

    (45) external_declaration -> declaration .

    WHILE           reduce using rule 45 (external_declaration -> declaration .)
    FOR             reduce using rule 45 (external_declaration -> declaration .)
    LBRACE          reduce using rule 45 (external_declaration -> declaration .)
    IF              reduce using rule 45 (external_declaration -> declaration .)
    RETURN          reduce using rule 45 (external_declaration -> declaration .)
    INT             reduce using rule 45 (external_declaration -> declaration .)
    CHAR            reduce using rule 45 (external_declaration -> declaration .)
    FLOAT           reduce using rule 45 (external_declaration -> declaration .)
    ID              reduce using rule 45 (external_declaration -> declaration .)
    INUMBER         reduce using rule 45 (external_declaration -> declaration .)
    FNUMBER         reduce using rule 45 (external_declaration -> declaration .)
    LPAREN          reduce using rule 45 (external_declaration -> declaration .)
    $end            reduce using rule 45 (external_declaration -> declaration .)
    RBRACE          reduce using rule 45 (external_declaration -> declaration .)
    ELSE            reduce using rule 45 (external_declaration -> declaration .)


state 17

    (39) return_statement -> RETURN . SEMICOLON
    (40) return_statement -> RETURN . expression SEMICOLON
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 38
    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    expression                     shift and go to state 39
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 18

    (16) expression -> logical_expression .
    (18) logical_expression -> logical_expression . DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> logical_expression . DOUBLE_PIPE equality_expression

  ! shift/reduce conflict for DOUBLE_AMPERSAND resolved as shift
  ! shift/reduce conflict for DOUBLE_PIPE resolved as shift
    SEMICOLON       reduce using rule 16 (expression -> logical_expression .)
    RPAREN          reduce using rule 16 (expression -> logical_expression .)
    EQ              reduce using rule 16 (expression -> logical_expression .)
    NOT_EQ          reduce using rule 16 (expression -> logical_expression .)
    LESS            reduce using rule 16 (expression -> logical_expression .)
    GREATER         reduce using rule 16 (expression -> logical_expression .)
    LESS_EQ         reduce using rule 16 (expression -> logical_expression .)
    GREATER_EQ      reduce using rule 16 (expression -> logical_expression .)
    DOUBLE_AMPERSAND shift and go to state 40
    DOUBLE_PIPE     shift and go to state 41

  ! DOUBLE_AMPERSAND [ reduce using rule 16 (expression -> logical_expression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 16 (expression -> logical_expression .) ]


state 19

    (46) function_definition -> type_specifier . declarator compound_statement
    (47) declaration -> type_specifier . declarator SEMICOLON
    (48) declarator -> . direct_declarator
    (49) direct_declarator -> . ID
    (50) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (51) direct_declarator -> . direct_declarator LPAREN RPAREN

    ID              shift and go to state 44

    declarator                     shift and go to state 42
    direct_declarator              shift and go to state 43

state 20

    (17) logical_expression -> equality_expression .
    (21) equality_expression -> equality_expression . EQ relational_expression
    (22) equality_expression -> equality_expression . NOT_EQ relational_expression

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
    DOUBLE_AMPERSAND reduce using rule 17 (logical_expression -> equality_expression .)
    DOUBLE_PIPE     reduce using rule 17 (logical_expression -> equality_expression .)
    SEMICOLON       reduce using rule 17 (logical_expression -> equality_expression .)
    RPAREN          reduce using rule 17 (logical_expression -> equality_expression .)
    LESS            reduce using rule 17 (logical_expression -> equality_expression .)
    GREATER         reduce using rule 17 (logical_expression -> equality_expression .)
    LESS_EQ         reduce using rule 17 (logical_expression -> equality_expression .)
    GREATER_EQ      reduce using rule 17 (logical_expression -> equality_expression .)
    EQ              shift and go to state 45
    NOT_EQ          shift and go to state 46

  ! EQ              [ reduce using rule 17 (logical_expression -> equality_expression .) ]
  ! NOT_EQ          [ reduce using rule 17 (logical_expression -> equality_expression .) ]


state 21

    (41) type_specifier -> INT .

    ID              reduce using rule 41 (type_specifier -> INT .)


state 22

    (42) type_specifier -> CHAR .

    ID              reduce using rule 42 (type_specifier -> CHAR .)


state 23

    (43) type_specifier -> FLOAT .

    ID              reduce using rule 43 (type_specifier -> FLOAT .)


state 24

    (20) equality_expression -> relational_expression .
    (25) relational_expression -> relational_expression . LESS op_expression
    (26) relational_expression -> relational_expression . GREATER op_expression
    (27) relational_expression -> relational_expression . LESS_EQ op_expression
    (28) relational_expression -> relational_expression . GREATER_EQ op_expression

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    EQ              reduce using rule 20 (equality_expression -> relational_expression .)
    NOT_EQ          reduce using rule 20 (equality_expression -> relational_expression .)
    DOUBLE_AMPERSAND reduce using rule 20 (equality_expression -> relational_expression .)
    DOUBLE_PIPE     reduce using rule 20 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 20 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 20 (equality_expression -> relational_expression .)
    LESS            shift and go to state 47
    GREATER         shift and go to state 48
    LESS_EQ         shift and go to state 49
    GREATER_EQ      shift and go to state 50

  ! LESS            [ reduce using rule 20 (equality_expression -> relational_expression .) ]
  ! GREATER         [ reduce using rule 20 (equality_expression -> relational_expression .) ]
  ! LESS_EQ         [ reduce using rule 20 (equality_expression -> relational_expression .) ]
  ! GREATER_EQ      [ reduce using rule 20 (equality_expression -> relational_expression .) ]


state 25

    (23) relational_expression -> op_expression .
    (29) op_expression -> op_expression . PLUS primary_expression
    (30) op_expression -> op_expression . MINUS primary_expression
    (31) op_expression -> op_expression . TIMES primary_expression
    (32) op_expression -> op_expression . DIV primary_expression
    (33) op_expression -> op_expression . MODULO primary_expression

    LESS            reduce using rule 23 (relational_expression -> op_expression .)
    GREATER         reduce using rule 23 (relational_expression -> op_expression .)
    LESS_EQ         reduce using rule 23 (relational_expression -> op_expression .)
    GREATER_EQ      reduce using rule 23 (relational_expression -> op_expression .)
    EQ              reduce using rule 23 (relational_expression -> op_expression .)
    NOT_EQ          reduce using rule 23 (relational_expression -> op_expression .)
    DOUBLE_AMPERSAND reduce using rule 23 (relational_expression -> op_expression .)
    DOUBLE_PIPE     reduce using rule 23 (relational_expression -> op_expression .)
    SEMICOLON       reduce using rule 23 (relational_expression -> op_expression .)
    RPAREN          reduce using rule 23 (relational_expression -> op_expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    TIMES           shift and go to state 53
    DIV             shift and go to state 54
    MODULO          shift and go to state 55


state 26

    (24) relational_expression -> assignation .

    LESS            reduce using rule 24 (relational_expression -> assignation .)
    GREATER         reduce using rule 24 (relational_expression -> assignation .)
    LESS_EQ         reduce using rule 24 (relational_expression -> assignation .)
    GREATER_EQ      reduce using rule 24 (relational_expression -> assignation .)
    EQ              reduce using rule 24 (relational_expression -> assignation .)
    NOT_EQ          reduce using rule 24 (relational_expression -> assignation .)
    DOUBLE_AMPERSAND reduce using rule 24 (relational_expression -> assignation .)
    DOUBLE_PIPE     reduce using rule 24 (relational_expression -> assignation .)
    SEMICOLON       reduce using rule 24 (relational_expression -> assignation .)
    RPAREN          reduce using rule 24 (relational_expression -> assignation .)


state 27

    (34) op_expression -> primary_expression .

    PLUS            reduce using rule 34 (op_expression -> primary_expression .)
    MINUS           reduce using rule 34 (op_expression -> primary_expression .)
    TIMES           reduce using rule 34 (op_expression -> primary_expression .)
    DIV             reduce using rule 34 (op_expression -> primary_expression .)
    MODULO          reduce using rule 34 (op_expression -> primary_expression .)
    LESS            reduce using rule 34 (op_expression -> primary_expression .)
    GREATER         reduce using rule 34 (op_expression -> primary_expression .)
    LESS_EQ         reduce using rule 34 (op_expression -> primary_expression .)
    GREATER_EQ      reduce using rule 34 (op_expression -> primary_expression .)
    EQ              reduce using rule 34 (op_expression -> primary_expression .)
    NOT_EQ          reduce using rule 34 (op_expression -> primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 34 (op_expression -> primary_expression .)
    DOUBLE_PIPE     reduce using rule 34 (op_expression -> primary_expression .)
    SEMICOLON       reduce using rule 34 (op_expression -> primary_expression .)
    RPAREN          reduce using rule 34 (op_expression -> primary_expression .)


state 28

    (15) assignation -> ID . ASSIGN expression
    (35) primary_expression -> ID .

    ASSIGN          shift and go to state 56
    PLUS            reduce using rule 35 (primary_expression -> ID .)
    MINUS           reduce using rule 35 (primary_expression -> ID .)
    TIMES           reduce using rule 35 (primary_expression -> ID .)
    DIV             reduce using rule 35 (primary_expression -> ID .)
    MODULO          reduce using rule 35 (primary_expression -> ID .)
    LESS            reduce using rule 35 (primary_expression -> ID .)
    GREATER         reduce using rule 35 (primary_expression -> ID .)
    LESS_EQ         reduce using rule 35 (primary_expression -> ID .)
    GREATER_EQ      reduce using rule 35 (primary_expression -> ID .)
    EQ              reduce using rule 35 (primary_expression -> ID .)
    NOT_EQ          reduce using rule 35 (primary_expression -> ID .)
    DOUBLE_AMPERSAND reduce using rule 35 (primary_expression -> ID .)
    DOUBLE_PIPE     reduce using rule 35 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 35 (primary_expression -> ID .)
    RPAREN          reduce using rule 35 (primary_expression -> ID .)


state 29

    (36) primary_expression -> INUMBER .

    PLUS            reduce using rule 36 (primary_expression -> INUMBER .)
    MINUS           reduce using rule 36 (primary_expression -> INUMBER .)
    TIMES           reduce using rule 36 (primary_expression -> INUMBER .)
    DIV             reduce using rule 36 (primary_expression -> INUMBER .)
    MODULO          reduce using rule 36 (primary_expression -> INUMBER .)
    LESS            reduce using rule 36 (primary_expression -> INUMBER .)
    GREATER         reduce using rule 36 (primary_expression -> INUMBER .)
    LESS_EQ         reduce using rule 36 (primary_expression -> INUMBER .)
    GREATER_EQ      reduce using rule 36 (primary_expression -> INUMBER .)
    EQ              reduce using rule 36 (primary_expression -> INUMBER .)
    NOT_EQ          reduce using rule 36 (primary_expression -> INUMBER .)
    DOUBLE_AMPERSAND reduce using rule 36 (primary_expression -> INUMBER .)
    DOUBLE_PIPE     reduce using rule 36 (primary_expression -> INUMBER .)
    SEMICOLON       reduce using rule 36 (primary_expression -> INUMBER .)
    RPAREN          reduce using rule 36 (primary_expression -> INUMBER .)


state 30

    (37) primary_expression -> FNUMBER .

    PLUS            reduce using rule 37 (primary_expression -> FNUMBER .)
    MINUS           reduce using rule 37 (primary_expression -> FNUMBER .)
    TIMES           reduce using rule 37 (primary_expression -> FNUMBER .)
    DIV             reduce using rule 37 (primary_expression -> FNUMBER .)
    MODULO          reduce using rule 37 (primary_expression -> FNUMBER .)
    LESS            reduce using rule 37 (primary_expression -> FNUMBER .)
    GREATER         reduce using rule 37 (primary_expression -> FNUMBER .)
    LESS_EQ         reduce using rule 37 (primary_expression -> FNUMBER .)
    GREATER_EQ      reduce using rule 37 (primary_expression -> FNUMBER .)
    EQ              reduce using rule 37 (primary_expression -> FNUMBER .)
    NOT_EQ          reduce using rule 37 (primary_expression -> FNUMBER .)
    DOUBLE_AMPERSAND reduce using rule 37 (primary_expression -> FNUMBER .)
    DOUBLE_PIPE     reduce using rule 37 (primary_expression -> FNUMBER .)
    SEMICOLON       reduce using rule 37 (primary_expression -> FNUMBER .)
    RPAREN          reduce using rule 37 (primary_expression -> FNUMBER .)


state 31

    (2) programme -> statement programme .

    $end            reduce using rule 2 (programme -> statement programme .)
    RBRACE          reduce using rule 2 (programme -> statement programme .)


state 32

    (11) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    expression                     shift and go to state 57
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 33

    (38) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 58


state 34

    (9) expression_statement -> expression SEMICOLON .

    WHILE           reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    ID              reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    INUMBER         reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    FNUMBER         reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    $end            reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 9 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 9 (expression_statement -> expression SEMICOLON .)


state 35

    (12) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (9) expression_statement -> . expression SEMICOLON
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    expression_statement           shift and go to state 59
    expression                     shift and go to state 11
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 36

    (10) compound_statement -> LBRACE programme . RBRACE

    RBRACE          shift and go to state 60


state 37

    (13) selection_statement -> IF LPAREN . expression RPAREN statement
    (14) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    expression                     shift and go to state 61
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 38

    (39) return_statement -> RETURN SEMICOLON .

    WHILE           reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    INT             reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    INUMBER         reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    FNUMBER         reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    $end            reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 39 (return_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 39 (return_statement -> RETURN SEMICOLON .)


state 39

    (40) return_statement -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 62


state 40

    (18) logical_expression -> logical_expression DOUBLE_AMPERSAND . equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    equality_expression            shift and go to state 63
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 41

    (19) logical_expression -> logical_expression DOUBLE_PIPE . equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    equality_expression            shift and go to state 64
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 42

    (46) function_definition -> type_specifier declarator . compound_statement
    (47) declaration -> type_specifier declarator . SEMICOLON
    (10) compound_statement -> . LBRACE programme RBRACE

    SEMICOLON       shift and go to state 66
    LBRACE          shift and go to state 13

    compound_statement             shift and go to state 65

state 43

    (48) declarator -> direct_declarator .
    (50) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (51) direct_declarator -> direct_declarator . LPAREN RPAREN

    SEMICOLON       reduce using rule 48 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 48 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 48 (declarator -> direct_declarator .)
    COMMA           reduce using rule 48 (declarator -> direct_declarator .)
    LPAREN          shift and go to state 67


state 44

    (49) direct_declarator -> ID .

    LPAREN          reduce using rule 49 (direct_declarator -> ID .)
    SEMICOLON       reduce using rule 49 (direct_declarator -> ID .)
    LBRACE          reduce using rule 49 (direct_declarator -> ID .)
    RPAREN          reduce using rule 49 (direct_declarator -> ID .)
    COMMA           reduce using rule 49 (direct_declarator -> ID .)


state 45

    (21) equality_expression -> equality_expression EQ . relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    relational_expression          shift and go to state 68
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 46

    (22) equality_expression -> equality_expression NOT_EQ . relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    relational_expression          shift and go to state 69
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 47

    (25) relational_expression -> relational_expression LESS . op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 71
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    op_expression                  shift and go to state 70
    primary_expression             shift and go to state 27

state 48

    (26) relational_expression -> relational_expression GREATER . op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 71
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    op_expression                  shift and go to state 72
    primary_expression             shift and go to state 27

state 49

    (27) relational_expression -> relational_expression LESS_EQ . op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 71
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    op_expression                  shift and go to state 73
    primary_expression             shift and go to state 27

state 50

    (28) relational_expression -> relational_expression GREATER_EQ . op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 71
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    op_expression                  shift and go to state 74
    primary_expression             shift and go to state 27

state 51

    (29) op_expression -> op_expression PLUS . primary_expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 71
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    primary_expression             shift and go to state 75

state 52

    (30) op_expression -> op_expression MINUS . primary_expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 71
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    primary_expression             shift and go to state 76

state 53

    (31) op_expression -> op_expression TIMES . primary_expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 71
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    primary_expression             shift and go to state 77

state 54

    (32) op_expression -> op_expression DIV . primary_expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 71
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    primary_expression             shift and go to state 78

state 55

    (33) op_expression -> op_expression MODULO . primary_expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 71
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    primary_expression             shift and go to state 79

state 56

    (15) assignation -> ID ASSIGN . expression
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    expression                     shift and go to state 80
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 57

    (11) iteration_statement -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 81


state 58

    (38) primary_expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 38 (primary_expression -> LPAREN expression RPAREN .)


state 59

    (12) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (9) expression_statement -> . expression SEMICOLON
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    expression_statement           shift and go to state 82
    expression                     shift and go to state 11
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 60

    (10) compound_statement -> LBRACE programme RBRACE .

    WHILE           reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    FOR             reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    LBRACE          reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    IF              reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    RETURN          reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    INT             reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    CHAR            reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    FLOAT           reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    ID              reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    INUMBER         reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    FNUMBER         reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    LPAREN          reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    $end            reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    RBRACE          reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)
    ELSE            reduce using rule 10 (compound_statement -> LBRACE programme RBRACE .)


state 61

    (13) selection_statement -> IF LPAREN expression . RPAREN statement
    (14) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 83


state 62

    (40) return_statement -> RETURN expression SEMICOLON .

    WHILE           reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    INUMBER         reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    FNUMBER         reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 40 (return_statement -> RETURN expression SEMICOLON .)


state 63

    (18) logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .
    (21) equality_expression -> equality_expression . EQ relational_expression
    (22) equality_expression -> equality_expression . NOT_EQ relational_expression

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
    DOUBLE_AMPERSAND reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    DOUBLE_PIPE     reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    SEMICOLON       reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    RPAREN          reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    LESS            reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    GREATER         reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    LESS_EQ         reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    GREATER_EQ      reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .)
    EQ              shift and go to state 45
    NOT_EQ          shift and go to state 46

  ! EQ              [ reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .) ]
  ! NOT_EQ          [ reduce using rule 18 (logical_expression -> logical_expression DOUBLE_AMPERSAND equality_expression .) ]


state 64

    (19) logical_expression -> logical_expression DOUBLE_PIPE equality_expression .
    (21) equality_expression -> equality_expression . EQ relational_expression
    (22) equality_expression -> equality_expression . NOT_EQ relational_expression

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
    DOUBLE_AMPERSAND reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    DOUBLE_PIPE     reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    SEMICOLON       reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    RPAREN          reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    LESS            reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    GREATER         reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    LESS_EQ         reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    GREATER_EQ      reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .)
    EQ              shift and go to state 45
    NOT_EQ          shift and go to state 46

  ! EQ              [ reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .) ]
  ! NOT_EQ          [ reduce using rule 19 (logical_expression -> logical_expression DOUBLE_PIPE equality_expression .) ]


state 65

    (46) function_definition -> type_specifier declarator compound_statement .

    WHILE           reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    FOR             reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    LBRACE          reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    IF              reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    RETURN          reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    ID              reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    INUMBER         reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    FNUMBER         reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    LPAREN          reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    RBRACE          reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)
    ELSE            reduce using rule 46 (function_definition -> type_specifier declarator compound_statement .)


state 66

    (47) declaration -> type_specifier declarator SEMICOLON .

    WHILE           reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    FOR             reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    LBRACE          reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    IF              reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    RETURN          reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    INT             reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    CHAR            reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    FLOAT           reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    ID              reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    INUMBER         reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    FNUMBER         reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    LPAREN          reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    $end            reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    RBRACE          reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)
    ELSE            reduce using rule 47 (declaration -> type_specifier declarator SEMICOLON .)


state 67

    (50) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (51) direct_declarator -> direct_declarator LPAREN . RPAREN
    (52) parameter_list -> . parameter_declaration
    (53) parameter_list -> . parameter_list COMMA parameter_declaration
    (54) parameter_declaration -> . type_specifier declarator
    (41) type_specifier -> . INT
    (42) type_specifier -> . CHAR
    (43) type_specifier -> . FLOAT

    RPAREN          shift and go to state 85
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23

    parameter_list                 shift and go to state 84
    parameter_declaration          shift and go to state 86
    type_specifier                 shift and go to state 87

state 68

    (21) equality_expression -> equality_expression EQ relational_expression .
    (25) relational_expression -> relational_expression . LESS op_expression
    (26) relational_expression -> relational_expression . GREATER op_expression
    (27) relational_expression -> relational_expression . LESS_EQ op_expression
    (28) relational_expression -> relational_expression . GREATER_EQ op_expression

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    EQ              reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    NOT_EQ          reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    DOUBLE_AMPERSAND reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    DOUBLE_PIPE     reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    SEMICOLON       reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .)
    LESS            shift and go to state 47
    GREATER         shift and go to state 48
    LESS_EQ         shift and go to state 49
    GREATER_EQ      shift and go to state 50

  ! LESS            [ reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .) ]
  ! GREATER         [ reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .) ]
  ! LESS_EQ         [ reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .) ]
  ! GREATER_EQ      [ reduce using rule 21 (equality_expression -> equality_expression EQ relational_expression .) ]


state 69

    (22) equality_expression -> equality_expression NOT_EQ relational_expression .
    (25) relational_expression -> relational_expression . LESS op_expression
    (26) relational_expression -> relational_expression . GREATER op_expression
    (27) relational_expression -> relational_expression . LESS_EQ op_expression
    (28) relational_expression -> relational_expression . GREATER_EQ op_expression

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    EQ              reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    NOT_EQ          reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    DOUBLE_AMPERSAND reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    DOUBLE_PIPE     reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    SEMICOLON       reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RPAREN          reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    LESS            shift and go to state 47
    GREATER         shift and go to state 48
    LESS_EQ         shift and go to state 49
    GREATER_EQ      shift and go to state 50

  ! LESS            [ reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .) ]
  ! GREATER         [ reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .) ]
  ! LESS_EQ         [ reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .) ]
  ! GREATER_EQ      [ reduce using rule 22 (equality_expression -> equality_expression NOT_EQ relational_expression .) ]


state 70

    (25) relational_expression -> relational_expression LESS op_expression .
    (29) op_expression -> op_expression . PLUS primary_expression
    (30) op_expression -> op_expression . MINUS primary_expression
    (31) op_expression -> op_expression . TIMES primary_expression
    (32) op_expression -> op_expression . DIV primary_expression
    (33) op_expression -> op_expression . MODULO primary_expression

    LESS            reduce using rule 25 (relational_expression -> relational_expression LESS op_expression .)
    GREATER         reduce using rule 25 (relational_expression -> relational_expression LESS op_expression .)
    LESS_EQ         reduce using rule 25 (relational_expression -> relational_expression LESS op_expression .)
    GREATER_EQ      reduce using rule 25 (relational_expression -> relational_expression LESS op_expression .)
    EQ              reduce using rule 25 (relational_expression -> relational_expression LESS op_expression .)
    NOT_EQ          reduce using rule 25 (relational_expression -> relational_expression LESS op_expression .)
    DOUBLE_AMPERSAND reduce using rule 25 (relational_expression -> relational_expression LESS op_expression .)
    DOUBLE_PIPE     reduce using rule 25 (relational_expression -> relational_expression LESS op_expression .)
    SEMICOLON       reduce using rule 25 (relational_expression -> relational_expression LESS op_expression .)
    RPAREN          reduce using rule 25 (relational_expression -> relational_expression LESS op_expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    TIMES           shift and go to state 53
    DIV             shift and go to state 54
    MODULO          shift and go to state 55


state 71

    (35) primary_expression -> ID .

    PLUS            reduce using rule 35 (primary_expression -> ID .)
    MINUS           reduce using rule 35 (primary_expression -> ID .)
    TIMES           reduce using rule 35 (primary_expression -> ID .)
    DIV             reduce using rule 35 (primary_expression -> ID .)
    MODULO          reduce using rule 35 (primary_expression -> ID .)
    LESS            reduce using rule 35 (primary_expression -> ID .)
    GREATER         reduce using rule 35 (primary_expression -> ID .)
    LESS_EQ         reduce using rule 35 (primary_expression -> ID .)
    GREATER_EQ      reduce using rule 35 (primary_expression -> ID .)
    EQ              reduce using rule 35 (primary_expression -> ID .)
    NOT_EQ          reduce using rule 35 (primary_expression -> ID .)
    DOUBLE_AMPERSAND reduce using rule 35 (primary_expression -> ID .)
    DOUBLE_PIPE     reduce using rule 35 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 35 (primary_expression -> ID .)
    RPAREN          reduce using rule 35 (primary_expression -> ID .)


state 72

    (26) relational_expression -> relational_expression GREATER op_expression .
    (29) op_expression -> op_expression . PLUS primary_expression
    (30) op_expression -> op_expression . MINUS primary_expression
    (31) op_expression -> op_expression . TIMES primary_expression
    (32) op_expression -> op_expression . DIV primary_expression
    (33) op_expression -> op_expression . MODULO primary_expression

    LESS            reduce using rule 26 (relational_expression -> relational_expression GREATER op_expression .)
    GREATER         reduce using rule 26 (relational_expression -> relational_expression GREATER op_expression .)
    LESS_EQ         reduce using rule 26 (relational_expression -> relational_expression GREATER op_expression .)
    GREATER_EQ      reduce using rule 26 (relational_expression -> relational_expression GREATER op_expression .)
    EQ              reduce using rule 26 (relational_expression -> relational_expression GREATER op_expression .)
    NOT_EQ          reduce using rule 26 (relational_expression -> relational_expression GREATER op_expression .)
    DOUBLE_AMPERSAND reduce using rule 26 (relational_expression -> relational_expression GREATER op_expression .)
    DOUBLE_PIPE     reduce using rule 26 (relational_expression -> relational_expression GREATER op_expression .)
    SEMICOLON       reduce using rule 26 (relational_expression -> relational_expression GREATER op_expression .)
    RPAREN          reduce using rule 26 (relational_expression -> relational_expression GREATER op_expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    TIMES           shift and go to state 53
    DIV             shift and go to state 54
    MODULO          shift and go to state 55


state 73

    (27) relational_expression -> relational_expression LESS_EQ op_expression .
    (29) op_expression -> op_expression . PLUS primary_expression
    (30) op_expression -> op_expression . MINUS primary_expression
    (31) op_expression -> op_expression . TIMES primary_expression
    (32) op_expression -> op_expression . DIV primary_expression
    (33) op_expression -> op_expression . MODULO primary_expression

    LESS            reduce using rule 27 (relational_expression -> relational_expression LESS_EQ op_expression .)
    GREATER         reduce using rule 27 (relational_expression -> relational_expression LESS_EQ op_expression .)
    LESS_EQ         reduce using rule 27 (relational_expression -> relational_expression LESS_EQ op_expression .)
    GREATER_EQ      reduce using rule 27 (relational_expression -> relational_expression LESS_EQ op_expression .)
    EQ              reduce using rule 27 (relational_expression -> relational_expression LESS_EQ op_expression .)
    NOT_EQ          reduce using rule 27 (relational_expression -> relational_expression LESS_EQ op_expression .)
    DOUBLE_AMPERSAND reduce using rule 27 (relational_expression -> relational_expression LESS_EQ op_expression .)
    DOUBLE_PIPE     reduce using rule 27 (relational_expression -> relational_expression LESS_EQ op_expression .)
    SEMICOLON       reduce using rule 27 (relational_expression -> relational_expression LESS_EQ op_expression .)
    RPAREN          reduce using rule 27 (relational_expression -> relational_expression LESS_EQ op_expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    TIMES           shift and go to state 53
    DIV             shift and go to state 54
    MODULO          shift and go to state 55


state 74

    (28) relational_expression -> relational_expression GREATER_EQ op_expression .
    (29) op_expression -> op_expression . PLUS primary_expression
    (30) op_expression -> op_expression . MINUS primary_expression
    (31) op_expression -> op_expression . TIMES primary_expression
    (32) op_expression -> op_expression . DIV primary_expression
    (33) op_expression -> op_expression . MODULO primary_expression

    LESS            reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ op_expression .)
    GREATER         reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ op_expression .)
    LESS_EQ         reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ op_expression .)
    GREATER_EQ      reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ op_expression .)
    EQ              reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ op_expression .)
    NOT_EQ          reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ op_expression .)
    DOUBLE_AMPERSAND reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ op_expression .)
    DOUBLE_PIPE     reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ op_expression .)
    SEMICOLON       reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ op_expression .)
    RPAREN          reduce using rule 28 (relational_expression -> relational_expression GREATER_EQ op_expression .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    TIMES           shift and go to state 53
    DIV             shift and go to state 54
    MODULO          shift and go to state 55


state 75

    (29) op_expression -> op_expression PLUS primary_expression .

    PLUS            reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    MINUS           reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    TIMES           reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    DIV             reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    MODULO          reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    LESS            reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    GREATER         reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    LESS_EQ         reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    GREATER_EQ      reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    EQ              reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    NOT_EQ          reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    DOUBLE_PIPE     reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    SEMICOLON       reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)
    RPAREN          reduce using rule 29 (op_expression -> op_expression PLUS primary_expression .)


state 76

    (30) op_expression -> op_expression MINUS primary_expression .

    PLUS            reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    MINUS           reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    TIMES           reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    DIV             reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    MODULO          reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    LESS            reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    GREATER         reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    LESS_EQ         reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    GREATER_EQ      reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    EQ              reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    NOT_EQ          reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    DOUBLE_PIPE     reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    SEMICOLON       reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)
    RPAREN          reduce using rule 30 (op_expression -> op_expression MINUS primary_expression .)


state 77

    (31) op_expression -> op_expression TIMES primary_expression .

    PLUS            reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    MINUS           reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    TIMES           reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    DIV             reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    MODULO          reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    LESS            reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    GREATER         reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    LESS_EQ         reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    GREATER_EQ      reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    EQ              reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    NOT_EQ          reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    DOUBLE_PIPE     reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    SEMICOLON       reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)
    RPAREN          reduce using rule 31 (op_expression -> op_expression TIMES primary_expression .)


state 78

    (32) op_expression -> op_expression DIV primary_expression .

    PLUS            reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    MINUS           reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    TIMES           reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    DIV             reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    MODULO          reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    LESS            reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    GREATER         reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    LESS_EQ         reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    GREATER_EQ      reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    EQ              reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    NOT_EQ          reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    DOUBLE_PIPE     reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    SEMICOLON       reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)
    RPAREN          reduce using rule 32 (op_expression -> op_expression DIV primary_expression .)


state 79

    (33) op_expression -> op_expression MODULO primary_expression .

    PLUS            reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    MINUS           reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    TIMES           reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    DIV             reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    MODULO          reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    LESS            reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    GREATER         reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    LESS_EQ         reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    GREATER_EQ      reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    EQ              reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    NOT_EQ          reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    DOUBLE_PIPE     reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    SEMICOLON       reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)
    RPAREN          reduce using rule 33 (op_expression -> op_expression MODULO primary_expression .)


state 80

    (15) assignation -> ID ASSIGN expression .

    LESS            reduce using rule 15 (assignation -> ID ASSIGN expression .)
    GREATER         reduce using rule 15 (assignation -> ID ASSIGN expression .)
    LESS_EQ         reduce using rule 15 (assignation -> ID ASSIGN expression .)
    GREATER_EQ      reduce using rule 15 (assignation -> ID ASSIGN expression .)
    EQ              reduce using rule 15 (assignation -> ID ASSIGN expression .)
    NOT_EQ          reduce using rule 15 (assignation -> ID ASSIGN expression .)
    DOUBLE_AMPERSAND reduce using rule 15 (assignation -> ID ASSIGN expression .)
    DOUBLE_PIPE     reduce using rule 15 (assignation -> ID ASSIGN expression .)
    SEMICOLON       reduce using rule 15 (assignation -> ID ASSIGN expression .)
    RPAREN          reduce using rule 15 (assignation -> ID ASSIGN expression .)


state 81

    (11) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) external_declaration -> . function_definition
    (45) external_declaration -> . declaration
    (39) return_statement -> . RETURN SEMICOLON
    (40) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (46) function_definition -> . type_specifier declarator compound_statement
    (47) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (41) type_specifier -> . INT
    (42) type_specifier -> . CHAR
    (43) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    expression                     shift and go to state 11
    statement                      shift and go to state 88
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 82

    (12) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (16) expression -> . logical_expression
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    expression                     shift and go to state 89
    logical_expression             shift and go to state 18
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 83

    (13) selection_statement -> IF LPAREN expression RPAREN . statement
    (14) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) external_declaration -> . function_definition
    (45) external_declaration -> . declaration
    (39) return_statement -> . RETURN SEMICOLON
    (40) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (46) function_definition -> . type_specifier declarator compound_statement
    (47) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (41) type_specifier -> . INT
    (42) type_specifier -> . CHAR
    (43) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    expression                     shift and go to state 11
    statement                      shift and go to state 90
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 84

    (50) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (53) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 91
    COMMA           shift and go to state 92


state 85

    (51) direct_declarator -> direct_declarator LPAREN RPAREN .

    LPAREN          reduce using rule 51 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMICOLON       reduce using rule 51 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACE          reduce using rule 51 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 51 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 51 (direct_declarator -> direct_declarator LPAREN RPAREN .)


state 86

    (52) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 52 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 52 (parameter_list -> parameter_declaration .)


state 87

    (54) parameter_declaration -> type_specifier . declarator
    (48) declarator -> . direct_declarator
    (49) direct_declarator -> . ID
    (50) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (51) direct_declarator -> . direct_declarator LPAREN RPAREN

    ID              shift and go to state 44

    declarator                     shift and go to state 93
    direct_declarator              shift and go to state 43

state 88

    (11) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    WHILE           reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INUMBER         reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FNUMBER         reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    $end            reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 11 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 89

    (12) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement

    RPAREN          shift and go to state 94


state 90

    (13) selection_statement -> IF LPAREN expression RPAREN statement .
    (14) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

    WHILE           reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INUMBER         reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FNUMBER         reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    $end            reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 95

  ! ELSE            [ reduce using rule 13 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 91

    (50) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LPAREN          reduce using rule 50 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMICOLON       reduce using rule 50 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 50 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 50 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 50 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 92

    (53) parameter_list -> parameter_list COMMA . parameter_declaration
    (54) parameter_declaration -> . type_specifier declarator
    (41) type_specifier -> . INT
    (42) type_specifier -> . CHAR
    (43) type_specifier -> . FLOAT

    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23

    parameter_declaration          shift and go to state 96
    type_specifier                 shift and go to state 87

state 93

    (54) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 54 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 54 (parameter_declaration -> type_specifier declarator .)


state 94

    (12) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) external_declaration -> . function_definition
    (45) external_declaration -> . declaration
    (39) return_statement -> . RETURN SEMICOLON
    (40) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (46) function_definition -> . type_specifier declarator compound_statement
    (47) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (41) type_specifier -> . INT
    (42) type_specifier -> . CHAR
    (43) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    expression_statement           shift and go to state 5
    expression                     shift and go to state 11
    statement                      shift and go to state 97
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 95

    (14) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (3) statement -> . iteration_statement
    (4) statement -> . compound_statement
    (5) statement -> . expression_statement
    (6) statement -> . selection_statement
    (7) statement -> . external_declaration
    (8) statement -> . return_statement
    (11) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (12) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (10) compound_statement -> . LBRACE programme RBRACE
    (9) expression_statement -> . expression SEMICOLON
    (13) selection_statement -> . IF LPAREN expression RPAREN statement
    (14) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (44) external_declaration -> . function_definition
    (45) external_declaration -> . declaration
    (39) return_statement -> . RETURN SEMICOLON
    (40) return_statement -> . RETURN expression SEMICOLON
    (16) expression -> . logical_expression
    (46) function_definition -> . type_specifier declarator compound_statement
    (47) declaration -> . type_specifier declarator SEMICOLON
    (17) logical_expression -> . equality_expression
    (18) logical_expression -> . logical_expression DOUBLE_AMPERSAND equality_expression
    (19) logical_expression -> . logical_expression DOUBLE_PIPE equality_expression
    (41) type_specifier -> . INT
    (42) type_specifier -> . CHAR
    (43) type_specifier -> . FLOAT
    (20) equality_expression -> . relational_expression
    (21) equality_expression -> . equality_expression EQ relational_expression
    (22) equality_expression -> . equality_expression NOT_EQ relational_expression
    (23) relational_expression -> . op_expression
    (24) relational_expression -> . assignation
    (25) relational_expression -> . relational_expression LESS op_expression
    (26) relational_expression -> . relational_expression GREATER op_expression
    (27) relational_expression -> . relational_expression LESS_EQ op_expression
    (28) relational_expression -> . relational_expression GREATER_EQ op_expression
    (29) op_expression -> . op_expression PLUS primary_expression
    (30) op_expression -> . op_expression MINUS primary_expression
    (31) op_expression -> . op_expression TIMES primary_expression
    (32) op_expression -> . op_expression DIV primary_expression
    (33) op_expression -> . op_expression MODULO primary_expression
    (34) op_expression -> . primary_expression
    (15) assignation -> . ID ASSIGN expression
    (35) primary_expression -> . ID
    (36) primary_expression -> . INUMBER
    (37) primary_expression -> . FNUMBER
    (38) primary_expression -> . LPAREN expression RPAREN

    WHILE           shift and go to state 9
    FOR             shift and go to state 12
    LBRACE          shift and go to state 13
    IF              shift and go to state 14
    RETURN          shift and go to state 17
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    ID              shift and go to state 28
    INUMBER         shift and go to state 29
    FNUMBER         shift and go to state 30
    LPAREN          shift and go to state 10

    expression                     shift and go to state 11
    statement                      shift and go to state 98
    iteration_statement            shift and go to state 3
    compound_statement             shift and go to state 4
    expression_statement           shift and go to state 5
    selection_statement            shift and go to state 6
    external_declaration           shift and go to state 7
    return_statement               shift and go to state 8
    function_definition            shift and go to state 15
    declaration                    shift and go to state 16
    logical_expression             shift and go to state 18
    type_specifier                 shift and go to state 19
    equality_expression            shift and go to state 20
    relational_expression          shift and go to state 24
    op_expression                  shift and go to state 25
    assignation                    shift and go to state 26
    primary_expression             shift and go to state 27

state 96

    (53) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 53 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 53 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 97

    (12) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    WHILE           reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INT             reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHAR            reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FLOAT           reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ID              reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INUMBER         reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FNUMBER         reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    $end            reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RBRACE          reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 12 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)


state 98

    (14) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    WHILE           reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INUMBER         reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FNUMBER         reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    $end            reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 14 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOUBLE_AMPERSAND in state 18 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_PIPE in state 18 resolved as shift
WARNING: shift/reduce conflict for EQ in state 20 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 20 resolved as shift
WARNING: shift/reduce conflict for LESS in state 24 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 24 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 24 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 24 resolved as shift
WARNING: shift/reduce conflict for EQ in state 63 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 63 resolved as shift
WARNING: shift/reduce conflict for EQ in state 64 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 64 resolved as shift
WARNING: shift/reduce conflict for LESS in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 69 resolved as shift
